#!python

from os.path import basename, splitext, split
import subprocess
import sys

def process_proto_msg(msg_stream, path):
    # Skip first line
    next(msg_stream)

    # Pattern that ends the part we are interested in
    def pattern(name):
        return 'name: "{}"'.format(name)

    # Get basename of lbbfile sans extension
    pdir, pbase = split(path)
    name, ext = splitext(pbase)

    # All possible ending patterns
    patterns = [pattern(name)]

    while pdir:
        pdir, pbase = split(pdir)
        name = pbase + ':' + name
        patterns.append(pattern(name))

    for line in msg_stream:
        for pattern in patterns:
            if line.startswith(pattern):
                raise StopIteration
        yield line

def disassemble(lbbfile, outfile):
    # Construct command to execute
    command = 'bloxdisassembler -p {}'.format(lbbfile)

    # Spawn sub-process to invoke bloxdisassembler
    proc = subprocess.Popen([command], stdout=subprocess.PIPE, shell=True)

    # Transform output
    with open(outfile, 'w') as out:
        for line in process_proto_msg(proc.stdout, lbbfile):
            out.write(line)

def usage():
    print >> sys.stderr, "Usage: {} LBBFILE OUTFILE".format(sys.argv[0])

if __name__ == '__main__':
    if len(sys.argv) != 3:
        usage()
        exit(1)

    disassemble(sys.argv[1], sys.argv[2])
