#!/usr/bin/env python

import fnmatch
import os
import string
import sys

MAKEFILE_TEMPLATE = '''\
$target: export LB_LIBRARY_PATH := $libpath
$target: $prerequisites
'''

def project_root(projectfile, logicdir):
    return os.path.relpath(os.path.dirname(projectfile), logicdir)

def project_property(projectfile, propname):
    with open(projectfile) as proj:
        for line in proj:
            if line.rstrip().endswith(propname):
                key, value = [s.strip() for s in line.split(',')]
                yield key

def project_name(projectfile):
    '''Return the project name as defined in the projectfile'''
    return next(project_property(projectfile, 'projectname'))

def project_dependencies(projectfile):
    '''Return the project dependencies as defined in the projectfile'''
    return list(project_property(projectfile, 'library'))

def collect_project_files(logicdir):
    '''Recursively find all project files'''
    for root, dirnames, filenames in os.walk(logicdir):
        for filename in fnmatch.filter(filenames, '*.project'):
            yield os.path.join(root, filename)

def collect_project_names(logicdir):
    for proj in collect_project_files(logicdir):
        projroot = project_root(proj, logicdir)
        projname = project_name(proj)
        yield (projname, projroot)

def analyze_dependencies(projectfile, logicdir):
    # Read dependencies of every project
    alldeps = {}
    for proj in collect_project_files(logicdir):
        projname = project_name(proj)
        deps = project_dependencies(proj)
        alldeps[projname] = deps

    # Compute transitive closure of dependencies
    dependencies = set(alldeps[project_name(projectfile)])

    while True:
        new_deps = set(x for d in dependencies for x in alldeps[d])
        deps_until_now = dependencies | new_deps

        if deps_until_now == dependencies:
            break

        dependencies = deps_until_now
    return list(dependencies)

def create_mk_segment(logicdir, projectfile, checksumfile):
    # Collect project names recursively
    projmeta = dict(collect_project_names(logicdir))

    # Parse given project file
    projroot = project_root(projectfile, logicdir)
    projname = project_name(projectfile)

    # Read dependencies (both explicit and transitive)
    deps = [projmeta[d] for d in project_dependencies(projectfile)]
    alldeps = [projmeta[d] for d in analyze_dependencies(projectfile, logicdir)]

    def relativize(dep):
        return os.path.relpath(checksumfile.replace(projroot, dep), logicdir)

    # Create prerequisites
    prereqs = [relativize(dep) for dep in deps]
    libdirs = [os.path.dirname(relativize(dep)) for dep in alldeps]

    # Create Makefile segment from template
    tpl = string.Template(MAKEFILE_TEMPLATE)

    # Perform template substitutions
    segment = tpl.substitute(target = os.path.relpath(checksumfile, logicdir),
                             libpath = ':'.join(libdirs),
                             prerequisites = ' '.join(prereqs))
    return segment


def usage():
    print >> sys.stderr, "Usage: {} LOGICDIR PROJECTFILE PLACEHOLDER".format(sys.argv[0])

if __name__ == '__main__':
    if len(sys.argv) != 4:
        usage()
        exit(1)
    print create_mk_segment(*sys.argv[1:])
