//------------------------------------------------------------------------------
// inttoptr constant expression
//------------------------------------------------------------------------------

// Integers can be cast to pointers. In such case, the conservative
// approach is to assume that the pointer may point to anywhere in
// memory.
//
// Example: (int *) 0xabcd

constant_points_to[Constant] = UNKNOWN <-
   inttoptr_constant_expression(Constant),
   unknown_location[] = UNKNOWN.

//------------------------------------------------------------------------------
// ptrtoint constant expression
//------------------------------------------------------------------------------

// A pointer may be masqueraded into an integer (or something else),
// but the associated memory locations are still valid.

constant_points_to[IntConstant] = Alloc <-
   ptrtoint_constant_expression:from[IntConstant] = PtrConstant,
   constant_points_to[PtrConstant] = Alloc.

//------------------------------------------------------------------------------
// bitcast constant expression
//------------------------------------------------------------------------------

constant_points_to[OuterConstant] = Alloc <-
   bitcast_constant_expression:from[OuterConstant] = InnerConstant,
   constant_points_to[InnerConstant] = Alloc.


//------------------------------------------------------------------------------
// [Field Sensitivity for `getelementptr` constant expressions]
//
// This is equivalent to the treatment of GEP instructions, but with
// no support for variable indices, as they are not allowed in
// constant expressions.
//------------------------------------------------------------------------------


// Compute intermediate points to for `getelementptr` constant
// expression up to some index

gep_constant_expr_points_to[CExpr, Index] = Alloc ->
   getelementptr_constant_expression(CExpr),
   int[64](Index),
   allocation(Alloc).

gep_constant_expr_points_to[CExpr, 0] = Alloc <-
   getelementptr_constant_expression:base[CExpr] = Base,
   constant_points_to[Base] = Alloc.


// First index as above

gep_constant_expr_points_to[CExpr, 1] = Alloc
 <-
   gep_constant_expr_points_to[CExpr, 0] = Alloc,
   ( basic_allocation(Alloc)
   ; alloc_subregion(Alloc) ),
   getelementptr_constant_expression:index[CExpr, 0] = Constant,
   constant:to_int[Constant] = 0.

alloc_subregion(NewAlloc)
 , alloc_subregion:at_any_array_index[Alloc] = NewAlloc
 , allocation:depth[NewAlloc] = NewDepth
 , gep_constant_expr_points_to[CExpr, 1] = NewAlloc
 <-
   gep_constant_expr_points_to[CExpr, 0] = Alloc,
   basic_allocation(Alloc),
   getelementptr_constant_expression:index[CExpr, 0] = Constant,
   constant:to_int[Constant] = Index,
   Index != 0,
   // check if subobject can be created
   alloc_may_expand_array(Alloc, NewDepth).


// Rest of the indices

alloc_subregion(NewAlloc)
 , alloc_subregion:at_any_array_index[Alloc] = NewAlloc
 , allocation:depth[NewAlloc] = NewDepth
 , gep_constant_expr_points_to[CExpr, NextIndex] = NewAlloc
 <-
   gep_constant_expr_points_to[CExpr, Index] = Alloc,
   getelementptr_constant_expression:interm_type[CExpr, Index] = DeclaredType,
   array_type(DeclaredType),
   // get constant array index (as integer)
   getelementptr_constant_expression:index[CExpr, Index] = _,
   // NextIndex = Index + 1
   constant_expression:next_index[CExpr, Index] = NextIndex,
   // check if subobject can be created
   alloc_may_expand_array(Alloc, NewDepth).


alloc_subregion(NewAlloc)
 , alloc_subregion:at_field[Alloc, Field] = NewAlloc
 , allocation:depth[NewAlloc] = NewDepth
 , gep_constant_expr_points_to[CExpr, NextIndex] = NewAlloc
 <-
   gep_constant_expr_points_to[CExpr, Index] = Alloc,
   getelementptr_constant_expression:interm_type[CExpr, Index] = DeclaredType,
   struct_type(DeclaredType),
   // get field (as integer constant)
   getelementptr_constant_expression:index[CExpr, Index] = Constant,
   constant:to_int[Constant] = Field,
   // NextIndex = Index + 1
   constant_expression:next_index[CExpr, Index] = NextIndex,
   // check if subobject can be created
   alloc_may_expand_field(Alloc, Field, NewDepth).


constant_points_to[CExpr] = Alloc <-
   getelementptr_constant_expression:nindices[CExpr] = Total,
   gep_constant_expr_points_to[CExpr, Total] = Alloc.
