// http://llvm.org/docs/LangRef.html#cmpxchg-instruction
// keywords: atomic; memory; instruction
//
// [Syntax]
//
// cmpxchg [weak] [volatile] <ty>* <pointer>,
//                           <ty> <cmp>,
//                           <ty> <new>
//         [singlethread] <success ordering> <failure ordering>
//    ; yields  { ty, i1 }
//

cmpxchg_instruction(Insn) -> instruction(Insn).

cmpxchg_instruction:ordering[Insn] = Ord ->
   cmpxchg_instruction(Insn), ordering(Ord).


// If the cmpxchg is marked as volatile, then the optimizer is not allowed
// to modify the number or order of execution of this cmpxchg with other
// volatile operations.

cmpxchg_instruction:volatile(Insn) ->
   cmpxchg_instruction(Insn).


// There are three arguments to the cmpxchg instruction:
//  (i)   an address to operate on,
//  (ii)  a value to compare to the value currently be at
//        that address, and
//  (iii) a new value to place at that address if the compared
//        values are equal.

cmpxchg_instruction:address[Insn] = Ptr ->
   cmpxchg_instruction(Insn), operand(Ptr).

cmpxchg_instruction:cmp[Insn] = Cmp ->
   cmpxchg_instruction(Insn), operand(Cmp).

cmpxchg_instruction:new[Insn] = New ->
   cmpxchg_instruction(Insn), operand(New).


// Auxiliary

cmpxchg_instruction:type[Insn] = Type <-
   cmpxchg_instruction:cmp[Insn] = Operand,
   operand:type[Operand] = Type.

cmpxchg_instruction:ret_type[Insn] = RetType <-
   cmpxchg_instruction(Insn),
   instruction:type[Insn] = RetType.


//------------------------------------------------------------------------------
// [Constraints]
//
//  1. the type of ‘<cmp>’ must be an integer type or pointer type
//     whose bit width is a power of two greater than or equal to
//     eight and less than or equal to a target-specific size limit
//  2. ‘<cmp>’ and ‘<new>’ must have the same type
//  3. the type of ‘<pointer>’ must be a pointer to that type
//  4. the original value at the location is returned, together with a
//     flag indicating success (true) or failure (false).
//------------------------------------------------------------------------------

// Required arguments

schema:sanity()
 , cmpxchg_instruction(Insn)
 ->
   cmpxchg_instruction:ordering[Insn] = _.

schema:sanity()
 , cmpxchg_instruction(Insn)
 ->
   cmpxchg_instruction:address[Insn] = _.

schema:sanity()
 , cmpxchg_instruction(Insn)
 ->
   cmpxchg_instruction:cmp[Insn] = _.

schema:sanity()
 , cmpxchg_instruction(Insn)
 ->
   cmpxchg_instruction:new[Insn] = _.


// 1. Constraint on value type

schema:sanity()
 , cmpxchg_instruction:type[_] = Type
 ->
   integer_type(Type)
 ; pointer_type(Type).


// 2. Type equality constaint on ‘<cmp>’ and ‘<new>’ arguments

schema:sanity()
 , cmpxchg_instruction:type[Insn] = Type
 , cmpxchg_instruction:cmp[Insn] = CmpOperand
 , cmpxchg_instruction:new[Insn] = NewOperand
 , operand:type[CmpOperand] = CmpType
 , operand:type[NewOperand] = NewType
 ->
   CmpType = Type,
   NewType = Type.


// 3. Type constraint on ‘<pointer>’ argument

schema:sanity()
 , cmpxchg_instruction:type[Insn] = Type
 , cmpxchg_instruction:address[Insn] = Ptr
 , operand:type[Ptr] = PtrType
 ->
   pointer_type:component[PtrType] = Type.


// 4. Return value

schema:sanity()
 , cmpxchg_instruction:ret_type[_] = RetType
 ->
   struct_type(RetType),
   struct_type:nfields[RetType] = 2.

schema:sanity()
 , cmpxchg_instruction:type[Insn] = Type
 , cmpxchg_instruction:ret_type[Insn] = RetType
 ->
   struct_type:field[RetType, 0] = Type.

schema:sanity()
 , int1_type[]  = i1
 , cmpxchg_instruction:ret_type[_] = RetType
 ->
   struct_type:field[RetType, 1] = i1.
