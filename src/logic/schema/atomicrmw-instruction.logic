// http://llvm.org/docs/LangRef.html#atomicrmw-instruction
// keywords: memory; instruction

atomicrmw_instruction(Insn) -> instruction(Insn).

atomicrmw_instruction:ordering[Insn] = Ord ->
   atomicrmw_instruction(Insn), ordering(Ord).


// If the atomicrmw is marked as volatile, then the optimizer is not allowed
// to modify the number or order of execution of this atomirmw with other
// volatile operations.

atomicrmw_instruction:volatile(Insn) ->
   atomicrmw_instruction(Insn).


// There are three arguments to the atomicrmw instruction:
//  (i)   an operation to apply,
//  (ii)  an address whose value to modify,
//  (iii) an argument to the operation.

atomicrmw_instruction:operation[Insn] = Op ->
   atomicrmw_instruction(Insn), operation(Op).

atomicrmw_instruction:address[Insn] = Ptr ->
   atomicrmw_instruction(Insn), operand(Ptr).

atomicrmw_instruction:value[Insn] = Value ->
   atomicrmw_instruction(Insn), operand(Value).


//------------------------------------------------------------------------------
// [Atomic Operation]
//
// The operation to apply for the ‘atomicrmw‘ instruction
// must be one of the following:
//------------------------------------------------------------------------------

operation(Op), operation:id(Op:Ref) -> string(Ref).
operation:xchg[] = Op <- operation:id(Op:"xchg").
operation:add[]  = Op <- operation:id(Op:"add").
operation:sub[]  = Op <- operation:id(Op:"sub").
operation:and[]  = Op <- operation:id(Op:"and").
operation:nand[] = Op <- operation:id(Op:"nand").
operation:nor[]  = Op <- operation:id(Op:"nor").
operation:or[]   = Op <- operation:id(Op:"or").
operation:xor[]  = Op <- operation:id(Op:"xor").
operation:max[]  = Op <- operation:id(Op:"max").
operation:min[]  = Op <- operation:id(Op:"min").
operation:umax[] = Op <- operation:id(Op:"umax").
operation:umin[] = Op <- operation:id(Op:"umin").

schema:sanity()
 , operation(Op)
 ->
   operation:xchg[] = Op ; operation:add[]  = Op
 ; operation:sub[]  = Op ; operation:and[]  = Op
 ; operation:nand[] = Op ; operation:nor[]  = Op
 ; operation:or[]   = Op ; operation:xor[]  = Op
 ; operation:max[]  = Op ; operation:min[]  = Op
 ; operation:umax[] = Op ; operation:umin[] = Op.


//------------------------------------------------------------------------------
// [Constraints]
//
// (i)  The type of ‘<value>’ must be an integer type.
// (ii) The type of the ‘<pointer>‘ operand must be a pointer to that type.
//------------------------------------------------------------------------------

schema:sanity()
 , atomicrmw_instruction(Insn)
 ->
   atomicrmw_instruction:ordering[Insn] = _.

schema:sanity()
 , atomicrmw_instruction(Insn)
 ->
   atomicrmw_instruction:operation[Insn] = _.

schema:sanity()
 , atomicrmw_instruction(Insn)
 ->
   atomicrmw_instruction:address[Insn] = _.

schema:sanity()
 , atomicrmw_instruction(Insn)
 ->
   atomicrmw_instruction:value[Insn] = _.

schema:sanity()
 , atomicrmw_instruction:value[_] = Value
 , operand:type[Value] = Type
 ->
   integer_type(Type).

schema:sanity()
 , atomicrmw_instruction:address[_] = Ptr
 , operand:type[Ptr] = Type
 ->
   pointer_type(Type).

schema:sanity()
 , atomicrmw_instruction(Insn)
 , atomicrmw_instruction:address[Insn] = Ptr
 , atomicrmw_instruction:value[Insn] = Value
 , operand:type[Ptr] = Type
 , pointer_type:component[Type] = Comp
 ->
   operand:type[Value] = Comp.
