// http://llvm.org/docs/LangRef.html#insertvalue-instruction
// keywords: aggregate; instruction

insertvalue_instruction(Insn) -> instruction(Insn).

insertvalue_instruction:base[Insn] = Aggregate ->
   insertvalue_instruction(Insn), operand(Aggregate).

insertvalue_instruction:value[Insn] = Value ->
   insertvalue_instruction(Insn), operand(Value).

//------------------------
// Aggregate Indices
//------------------------

insertvalue_instruction:nindices[Insn] = Total ->
   insertvalue_instruction(Insn), int[64](Total).

insertvalue_instruction:index[Insn, Index] = Idx ->
   insertvalue_instruction(Insn), int[64](Index), int[64](Idx).

instruction:next_index[Insn, Index] = Index + 1 <-
   insertvalue_instruction:index[Insn, Index] = _.

//------------------------------------------------
// The resulting type for each dereference.
//------------------------------------------------

insertvalue_instruction:interm_type[Insn, 0] = Type <-
   insertvalue_instruction:base[Insn] = Aggregate,
   operand:type[Aggregate] = Type.

insertvalue_instruction:interm_type[Insn, Next] = Comp <-
   insertvalue_instruction:interm_type[Insn, Index] = Type,
   insertvalue_instruction:index[Insn, Index] = IdxValue,
   struct_type:field[Type, IdxValue] = Comp,
   instruction:next_index[Insn, Index] = Next.

insertvalue_instruction:interm_type[Insn, Next] = Comp <-
   insertvalue_instruction:interm_type[Insn, Index] = Type,
   array_type:component[Type] = Comp,
   instruction:next_index[Insn, Index] = Next.

insertvalue_instruction:value_type[Insn] = Type <-
   insertvalue_instruction:nindices[Insn] = Total,
   insertvalue_instruction:interm_type[Insn, Total] = Type.

insertvalue_instruction:value_type[Insn] = Type <-
   insertvalue_instruction:value[Insn] = Value,
   operand:type[Value] = Type. // c3 (fdv)

insertvalue_instruction:base_type[Insn] = Type <-
   insertvalue_instruction:interm_type[Insn, 0] = Type.


//------------------------------------------------------------------------------
// [Constraints]
//
//  (1) The first operand of an ‘insertvalue‘ instruction is
//      a value of struct or array type.
//  (2) The second operand is a first-class value to insert.
//  (3) The value to insert must have the same type as the value
//      identified by the indices.
//  (4) At least one index must be specified.
//
// The result is an aggregate of the same type as the first
// operand type.
//------------------------------------------------------------------------------

schema:sanity()
 , insertvalue_instruction(Insn)
 ->
   insertvalue_instruction:base[Insn] = _.

schema:sanity()
 , insertvalue_instruction(Insn)
 ->
   insertvalue_instruction:value[Insn] = _.

schema:sanity()
 , insertvalue_instruction(Insn)
 ->
   insertvalue_instruction:nindices[Insn] = _.

schema:sanity()
 , insertvalue_instruction(Insn)
 ->
   insertvalue_instruction:index[Insn, 0] = _.

schema:sanity()
 , insertvalue_instruction:nindices[_] = Total
 ->
   Total > 0. // c4

schema:sanity()
 , insertvalue_instruction:base_type[_] = Type
 ->
   aggregate_type(Type). // c1

schema:sanity()
 , insertvalue_instruction:value_type[_] = Type
 ->
   type:firstclass(Type). // c2

schema:sanity()
 , insertvalue_instruction:base_type[Insn] = Type
 ->
   instruction:type[Insn] = Type. // creturn
