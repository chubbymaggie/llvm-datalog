// http://llvm.org/docs/LangRef.html#ret-instruction
// keywords: terminator; instruction

ret_instruction(Insn) -> instruction(Insn).

terminator_instruction(Insn) <-
   ret_instruction(Insn).


// The ‘ret‘ instruction optionally accepts a single
// argument, the return value.

ret_instruction:value[Insn] = Value ->
   ret_instruction(Insn), operand(Value).

ret_instruction:void(Insn) -> ret_instruction(Insn).

schema:sanity()
 , ret_instruction:void(Insn)
 ->
   !ret_instruction:value[Insn] = _.


//------------------------------------------------------------------------------
// [Well Formed Functions]
//
// A function is not well formed if:
//  (i)   it it has a non-void return type and contains a ‘ret‘
//        instruction with no return value or
//
//  (ii)  a return value with a type that does not match its type, or
//
//  (iii) if it has a void return type and contains a ‘ret‘
//        instruction with a return value.
//------------------------------------------------------------------------------

function:wellformed(Func) <-
   function(Func), !function:illformed(Func).

function:illformed(Func) <-
   void_type[] = Void,
   function:type[Func] = Type,
   function_type:return[Type] != Void,
   ret_instruction:void(Insn),
   instruction:function[Insn] = Func.

function:illformed(Func) <-
   void_type[] = Void,
   function:type[Func] = Type,
   function_type:return[Type] = Ret,
   Ret != Void,
   ret_instruction:value[Insn] = Value,
   operand:type[Value] != Ret,
   instruction:function[Insn] = Func.

function:illformed(Func) <-
   void_type[] = Void,
   function:type[Func] = Type,
   function_type:return[Type] = Void,
   ret_instruction(Insn),
   !ret_instruction:void(Insn),
   instruction:function[Insn] = Func.


//------------------------------------------------------------------------------
// [Constraints]
//
//  (i) The type of the return value must be a ‘first class‘ type.
//------------------------------------------------------------------------------

schema:sanity()
 , ret_instruction:value[_] = Value
 ->
   operand:firstclass(Value).
