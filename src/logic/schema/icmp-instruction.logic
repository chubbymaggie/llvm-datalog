// http://llvm.org/docs/LangRef.html#icmp-instruction
// keywords: comparison; binary; instruction

icmp_instruction(Insn) -> instruction(Insn).

icmp_instruction:condition[Insn] = Cond ->
   icmp_instruction(Insn), icmp_condition(Cond).

icmp_instruction:first_operand[Insn] = Left ->
   icmp_instruction(Insn), operand(Left).

icmp_instruction:second_operand[Insn] = Right ->
   icmp_instruction(Insn), operand(Right).


// Condition code and selectors for the ‘icmp‘ Instruction, as enum

icmp_condition(Cond), icmp_condition:id(Cond:Ref) -> string(Ref).

icmp_condition:eq[]  = Cond <- icmp_condition:id(Cond:"eq").
icmp_condition:ne[]  = Cond <- icmp_condition:id(Cond:"ne").
icmp_condition:sgt[] = Cond <- icmp_condition:id(Cond:"sgt").
icmp_condition:sge[] = Cond <- icmp_condition:id(Cond:"sge").
icmp_condition:slt[] = Cond <- icmp_condition:id(Cond:"slt").
icmp_condition:sle[] = Cond <- icmp_condition:id(Cond:"sle").
icmp_condition:ugt[] = Cond <- icmp_condition:id(Cond:"ugt").
icmp_condition:ule[] = Cond <- icmp_condition:id(Cond:"ule").
icmp_condition:uge[] = Cond <- icmp_condition:id(Cond:"uge").
icmp_condition:ult[] = Cond <- icmp_condition:id(Cond:"ult").

schema:sanity()
 , icmp_condition(Cond)
 ->
   icmp_condition:eq[]  = Cond; icmp_condition:ne[]  = Cond;
   icmp_condition:sgt[] = Cond; icmp_condition:sge[] = Cond;
   icmp_condition:slt[] = Cond; icmp_condition:sle[] = Cond;
   icmp_condition:ugt[] = Cond; icmp_condition:ule[] = Cond;
   icmp_condition:uge[] = Cond; icmp_condition:ult[] = Cond.


// Abbreviations

icmp_instruction:from_type[Insn]  = Type <-
   icmp_instruction:first_operand[Insn]  = Operand,
   operand:type[Operand] = Type.

icmp_instruction:to_type[Insn]  = Type <-
   icmp_instruction(Insn),
   instruction:type[Insn] = Type.



//--------------------------------------------
// [Constraints]
//
// The ‘icmp‘ instruction returns:
//  (i)  a boolean value or
//  (ii) a vector of boolean values
//
// based on the comparison of its two:
//  (i)   integer,
//  (ii)  integer vector,
//  (iii) pointer, or
//  (iv)  pointer vector operands.
//
// They must also be identical types.
//--------------------------------------------


schema:sanity()
 , icmp_instruction(Insn)
 ->
   icmp_instruction:condition[Insn] = _.

schema:sanity()
 , icmp_instruction(Insn)
 ->
   icmp_instruction:first_operand[Insn] = _.

schema:sanity()
 , icmp_instruction(Insn)
 ->
   icmp_instruction:second_operand[Insn] = _.

schema:sanity()
 , icmp_instruction:to_type[_] = Type
 ->
   boolean_type(Type); vector_type:boolean(Type).

schema:sanity()
 , icmp_instruction:from_type[_] = Type
 ->
   integer_type(Type) ; vector_type:integer(Type);
   pointer_type(Type) ; vector_type:pointer(Type).

schema:sanity()
 , icmp_instruction(Insn)
 , icmp_instruction:first_operand[Insn]  = Left
 , icmp_instruction:second_operand[Insn] = Right
 , operand:type[Left]  = Type1
 , operand:type[Right] = Type2
 ->
   Type1 = Type2.

schema:sanity()
 , icmp_instruction(Insn)
 , icmp_instruction:from_type[Insn] = From
 , icmp_instruction:to_type[Insn] = To
 ->
   vector:compatible(From, To).
