// http://llvm.org/docs/LangRef.html#invoke-instruction
// keywords: terminator; instruction

invoke_instruction(Insn) -> instruction(Insn).

terminator_instruction(Insn) <-
   invoke_instruction(Insn).

// Function operand: can be either a constant or a variable
invoke_instruction:__function[Insn] = Func ->
   invoke_instruction(Insn), operand(Func).

// Resolved function of invoke instruction. Initially empty.
invoke_instruction:function[Insn] = Func ->
   invoke_instruction(Insn), function_decl(Func).

lang:derivationType[`invoke_instruction:function] = "DerivedAndStored".


// If none is specified, the invocation defaults to using C
// calling conventions.
invoke_instruction:calling_convention[Insn] = Conv ->
   invoke_instruction(Insn), calling_convention(Conv).


//---------------------------------------------------------------
// [Direct and Indirect Invoke Instructions]
//
// Invoke-instructions are divided into direct invocations
// that provide a function name, and indirect invocations
// through a function pointer variable.
//---------------------------------------------------------------

direct_invoke_instruction(Insn)   -> invoke_instruction(Insn).
indirect_invoke_instruction(Insn) -> invoke_instruction(Insn).

direct_invoke_instruction(Insn) <-
   invoke_instruction:__function[Insn] = Func,
   operand:as_constant[Func] = _.

indirect_invoke_instruction(Insn) <-
   invoke_instruction:__function[Insn] = Func,
   operand:as_variable[Func] = _.


//----------------------
// Actual arguments
//----------------------

invoke_instruction:arg[Insn, Index] = Arg ->
   invoke_instruction(Insn), int[64](Index), operand(Arg).


//-------------------------
// Parameter Attributes
//-------------------------

invoke_instruction:return_attribute(Insn, Attr) ->
   invoke_instruction(Insn), attribute(Attr).

invoke_instruction:param_attribute(Insn, Index, Attr) ->
   invoke_instruction(Insn), int[64](Index), attribute(Attr).

invoke_instruction:fn_attribute(Insn, Attr) ->
   invoke_instruction(Insn), attribute(Attr).


//-----------------------------
// Signature (function type)
//-----------------------------

invoke_instruction:signature[Insn] = Type <-
   invoke_instruction:__function[Insn] = Func,
   operand:type[Func] = PtrType,
   pointer_type:component[PtrType] = Type,
   function_type(Type).

invoke_instruction:return_type[Insn] = Type <-
   invoke_instruction:signature[Insn] = Signature,
   function_type:return[Signature] = Type.


//------------------------------------------------------------------------------
// [Labels]
//
// ‘normal label‘:
//    the label reached when the called function executes a ‘ret‘
//    instruction.
//
// ‘exception label‘:
//   the label reached when a callee returns via the resume
//   instruction or other exception handling mechanism.
//------------------------------------------------------------------------------

invoke_instruction:normal_label[Insn] = Normal ->
   invoke_instruction(Insn), variable(Normal).

invoke_instruction:exception_label[Insn] = Exception ->
   invoke_instruction(Insn), variable(Exception).


//------------------------------------------------------------------------------
// [Constraints]
//
//  (1) Only ‘zeroext‘, ‘signext‘, and ‘inreg‘ attributes
//      are valid for return values.
//  (2) The type of the invoke instruction is also the type of
//      the return value. Functions that return no value are
//      marked void.
//  (3) The function type shall be the signature of the pointer
//      to function value being invoked. The argument types must
//      match the types implied by this signature.
//  (4) All arguments must be of first class type.
//  (5) Only ‘noreturn‘, ‘nounwind‘, ‘readonly‘ and ‘readnone‘
//      attributes are valid as function attributes.
//  (6) The 'invoke' instruction' takes a 'normal label' and
//  (7) an 'exceptional label'.
//------------------------------------------------------------------------------

schema:sanity()
 , invoke_instruction(Insn)
 ->
   invoke_instruction:__function[Insn] = _.

schema:sanity()
 , invoke_instruction(Insn)
 ->
   invoke_instruction:normal_label[Insn] = _.

schema:sanity()
 , invoke_instruction(Insn)
 ->
   invoke_instruction:exception_label[Insn] = _.


// attribute compatibility
schema:sanity()
 , invoke_instruction:return_attribute(_, Attr)
 ->
   parameter_attribute:zeroext[] = Attr
 ; parameter_attribute:signext[] = Attr
 ; parameter_attribute:inreg[] = Attr
 ; parameter_attribute:noallias[] = Attr
 ; parameter_attribute:dereferenceable(Attr).   // c1

schema:sanity()
 , invoke_instruction:fn_attribute(_, Attr)
 ->
   function_attribute:noreturn[] = Attr
 ; function_attribute:nounwind[] = Attr
 ; function_attribute:readonly[] = Attr
 ; function_attribute:readnone[] = Attr
 ; function_attribute:cold[] = Attr
 ; function_attribute:returns_twice[] = Attr
 ; function_attribute:builtin[] = Attr
 ; target_dependent_attribute(Attr). // c5

// cc compatibility
schema:sanity()
 , instruction:function[Insn] = Func
 , invoke_instruction:calling_convention[Insn] = Conv
 ->
   function:calling_convention[Func] = Conv.


// Signature conformance
schema:sanity()
 , invoke_instruction:signature[Insn] = Signature
 , function_type:param[Signature, Index] = _
 ->
   invoke_instruction:arg[Insn, Index] = _.

schema:sanity()
 , invoke_instruction:signature[Insn] = Signature
 , function_type:param[Signature, Index] = Type
 , invoke_instruction:arg[Insn, Index] = Arg
 ->
   operand:type[Arg] = Type. // c3

schema:sanity()
 , invoke_instruction:signature[Insn] = Signature
 , invoke_instruction:arg[Insn, Index] = _
 ->
   function_type:param[Signature, Index] = _ ;
   function_type:varargs(Signature).

schema:sanity()
 , invoke_instruction:return_type[Insn] = Type
 , void_type[] != Type
 ->
   instruction:type[Insn] = Type. // c2

schema:sanity()
 , invoke_instruction:return_type[Insn] = Type
 , void_type[] = Type
 ->
   !instruction:type[Insn] = _. // c2 vice versa


// only first class arguments allowed
schema:sanity()
 , invoke_instruction:arg[_, _] = Arg
 , operand:type[Arg] = Type
 ->
   type:firstclass(Type). // c4

schema:sanity()
 , invoke_instruction:normal_label[_] = Normal
 ->
   variable:label(Normal). // c6

schema:sanity()
 , invoke_instruction:exception_label[_] = Exceptional
 ->
   variable:label(Exceptional). // c7
