// http://llvm.org/docs/LangRef.html#fcmp-instruction
// keywords: comparison; binary; instruction

fcmp_instruction(Insn) -> instruction(Insn).

fcmp_instruction:condition[Insn] = Cond ->
   fcmp_instruction(Insn), fcmp_condition(Cond).

fcmp_instruction:first_operand[Insn] = Left ->
   fcmp_instruction(Insn), operand(Left).

fcmp_instruction:second_operand[Insn] = Right ->
   fcmp_instruction(Insn), operand(Right).


//------------------------------------------------------------------------------
// [Condition Codes]
//
// Condition Code enum representation for the ‘fcmp‘ instruction, and
// its selectors.
//------------------------------------------------------------------------------

fcmp_condition(Cond), fcmp_condition:id(Cond:Ref) -> string(Ref).


fcmp_condition:false[] = Cond <- fcmp_condition:id(Cond:"false").
fcmp_condition:true[]  = Cond <- fcmp_condition:id(Cond:"true").
fcmp_condition:oeq[]   = Cond <- fcmp_condition:id(Cond:"oeq").
fcmp_condition:ogt[]   = Cond <- fcmp_condition:id(Cond:"ogt").
fcmp_condition:oge[]   = Cond <- fcmp_condition:id(Cond:"oge").
fcmp_condition:olt[]   = Cond <- fcmp_condition:id(Cond:"olt").
fcmp_condition:ole[]   = Cond <- fcmp_condition:id(Cond:"ole").
fcmp_condition:one[]   = Cond <- fcmp_condition:id(Cond:"one").
fcmp_condition:ord[]   = Cond <- fcmp_condition:id(Cond:"ord").
fcmp_condition:ueq[]   = Cond <- fcmp_condition:id(Cond:"ueq").
fcmp_condition:ugt[]   = Cond <- fcmp_condition:id(Cond:"ugt").
fcmp_condition:uge[]   = Cond <- fcmp_condition:id(Cond:"uge").
fcmp_condition:ult[]   = Cond <- fcmp_condition:id(Cond:"ult").
fcmp_condition:ule[]   = Cond <- fcmp_condition:id(Cond:"ule").
fcmp_condition:une[]   = Cond <- fcmp_condition:id(Cond:"une").
fcmp_condition:uno[]   = Cond <- fcmp_condition:id(Cond:"uno").


// the enum enforcement by constraint
schema:sanity()
 , fcmp_condition(Cond)
 ->
   fcmp_condition:false[] = Cond ; fcmp_condition:true[] = Cond
 ; fcmp_condition:oeq[]   = Cond ; fcmp_condition:ogt[]  = Cond
 ; fcmp_condition:oge[]   = Cond ; fcmp_condition:olt[]  = Cond
 ; fcmp_condition:ole[]   = Cond ; fcmp_condition:one[]  = Cond
 ; fcmp_condition:ord[]   = Cond ; fcmp_condition:ueq[]  = Cond
 ; fcmp_condition:ugt[]   = Cond ; fcmp_condition:uge[]  = Cond
 ; fcmp_condition:ult[]   = Cond ; fcmp_condition:ule[]  = Cond
 ; fcmp_condition:une[]   = Cond ; fcmp_condition:uno[]  = Cond.


// Abbreviations

fcmp_instruction:from_type[Insn]  = Type <-
   fcmp_instruction:first_operand[Insn]  = Operand,
   operand:type[Operand] = Type.

fcmp_instruction:to_type[Insn]  = Type <-
   fcmp_instruction(Insn),
   instruction:type[Insn] = Type.


//-------------------------------------------------------------------
// [Constraints]
//
// 1) The ‘fcmp‘ instruction returns:
//      (i)  a boolean value or
//      (ii) a vector of boolean values
//
//    based on comparison of its two:
//      (i)  floating point or
//      (ii) floating point vector operands.
//
// 2) They must also be identical types.
//
// 3) If the operands are floating point vectors
//      (i)  the result type is a boolean vector
//      (ii) with the same number of elements.
//-------------------------------------------------------------------

schema:sanity()
 , fcmp_instruction(Insn)
 ->
   fcmp_instruction:condition[Insn] = _.

schema:sanity()
 , fcmp_instruction(Insn)
 ->
   fcmp_instruction:first_operand[Insn] = _.

schema:sanity()
 , fcmp_instruction(Insn)
 ->
   fcmp_instruction:second_operand[Insn] = _.

schema:sanity()
 , fcmp_instruction:to_type[_] = Type
 ->
   boolean_type(Type); vector_type:boolean(Type).

schema:sanity()
 , fcmp_instruction:from_type[_] = Type
 ->
   fp_type(Type) ; vector_type:fp(Type).

schema:sanity()
 , fcmp_instruction(Insn)
 , fcmp_instruction:first_operand[Insn]  = Left
 , fcmp_instruction:second_operand[Insn] = Right
 , operand:type[Left]  = Type1
 , operand:type[Right] = Type2
 ->
   Type1 = Type2.

schema:sanity()
 , fcmp_instruction(Insn)
 , fcmp_instruction:from_type[Insn] = From
 , fcmp_instruction:to_type[Insn] = To
 ->
   vector:compatible(From, To).
