// keywords: derived; first class; aggregate
// http://llvm.org/docs/LangRef.html#array-type
// http://llvm.org/docs/LangRef.html#function-type
// http://llvm.org/docs/LangRef.html#pointer-type
// http://llvm.org/docs/LangRef.html#structure-type
// http://llvm.org/docs/LangRef.html#vector-type


//------------------------------------------------------------------------------
// Type Hierarchy under derived types
//------------------------------------------------------------------------------

derived_type(Type)   -> type(Type).
function_type(Type)  -> derived_type(Type).
pointer_type(Type)   -> derived_type(Type).
vector_type(Type)    -> derived_type(Type).
aggregate_type(Type) -> derived_type(Type).
array_type(Type)     -> aggregate_type(Type).
struct_type(Type)    -> aggregate_type(Type).
opaque_struct_type(Type) -> struct_type(Type).

lang:isEntity[`opaque_struct_type] = true.


//----------------------
// First Class Types
//----------------------

type:firstclass(Type) <-
   type(Type),
   !function_type(Type),
   !void_type[] = Type.


//----------------------
// Struct type
//----------------------

struct_type:field[Type, Index] = Field ->
   struct_type(Type), int[64](Index), type(Field).

struct_type:nfields[Type] = Total ->
   struct_type(Type), int[64](Total).

schema:sanity()
 , struct_type(Type)
 , !opaque_struct_type(Type)
 ->
   struct_type:nfields[Type] = _.

// Byte offset per field
struct_type:field_offset[Type, Index] = Offset ->
   struct_type(Type), int[64](Index), int[64](Offset).

// Bit offset per field
struct_type:field_bit_offset[Type, Index] = Offset ->
   struct_type(Type), int[64](Index), int[64](Offset).


// [DEBUG INFORMATION]
//
// We record field names and inherited types at specific bit
// offsets. These predicates will be empty, unless the debug-info
// module is loaded.

struct_type:field_name_at_offset[Type, Offset] = Name ->
   struct_type(Type), int[64](Offset), string(Name).

struct_type:inherits_at_offset[Type, Offset] = Name ->
   struct_type(Type), int[64](Offset), string(Name).


//-----------------------------------------------------------------------
// [Retrieving field names]
//
// We can immediately retrieve any field names at non-zero
// offsets. For zero offsets, where inheritance kicks in, we have to
// make sure that we have pruned any spurious inherited subobjects of
// zero length.
//-----------------------------------------------------------------------

struct_type:field_name[Type, Index] = Name ->
   struct_type(Type), int[64](Index), string(Name).

struct_type:field_name[Type, Index] = Name <-
   struct_type:field_name_at_offset[Type, Offset] = Name,
   struct_type:field_bit_offset[Type, Index] = Offset.

struct_type:field_name[Type, Index] = "_subobj$" + BaseName <-
   struct_type:inherits_at_offset[Type, Offset] = BaseName,
   struct_type:field_bit_offset[Type, Index] = Offset.

// A derived type may include extra byte fields that account for the
// required padding. However, when a subtype inherits a base type it
// uses an *unpadded* version of the latter (with the `.base`) suffix,
// since it does not need to include its padding.

// Here we replicate any existing field name information of the
// original derived type to the *unpadded* one.

struct_type:field_name[UnpaddedType, Index] = Name <-
   struct_type:field_name_at_offset[Type, Offset] = Name,
   struct_type:field_bit_offset[Type, Index] = Offset,
   struct_type:field_bit_offset[UnpaddedType, Index] = Offset,
   type:id(Type:Sign),
   type:id(UnpaddedType:UnpaddedSign),
   UnpaddedSign = Sign + ".base".

struct_type:field_name[UnpaddedType, Index] = "_subobj$" + Name <-
   struct_type:inherits_at_offset[Type, Offset] = Name,
   struct_type:field_bit_offset[Type, Index] = Offset,
   struct_type:field_bit_offset[UnpaddedType, Index] = Offset,
   type:id(Type:Sign),
   type:id(UnpaddedType:UnpaddedSign),
   UnpaddedSign = Sign + ".base".


//----------------------
// Array Type
//----------------------

array_type:component[Type] = Comp ->
   array_type(Type), type(Comp).

array_type:size[Type] = Size ->
   array_type(Type), int[64](Size).

schema:sanity()
 , array_type(Type)
 ->
   array_type:component[Type] = _.

schema:sanity()
 , array_type(Type)
 ->
   array_type:size[Type] = _.

array_type:i8(Type) <-
   array_type:component[Type] = Comp,
   int8_type[] = Comp.


//----------------------
// Function type
//----------------------

function_type:varargs(Type) -> function_type(Type).

function_type:return[Type] = Ret ->
   function_type(Type), type(Ret).

function_type:param[Type, Index] = Param ->
   function_type(Type), int[64](Index), type(Param).

function_type:nparams[Type] = Total ->
   function_type(Type), int[64](Total).

schema:sanity()
 , function_type(Type)
 ->
   function_type:nparams[Type] = _.

schema:sanity()
 , function_type:return[_] = Ret
 ->
   metadata_type[] != Ret,
   label_type[] != Ret.


//----------------------
// Pointer type
//----------------------

pointer_type:component[Type] = Comp ->
   pointer_type(Type), type(Comp).

pointer_type:addr_space[Type] = Addr ->
   pointer_type(Type), int[64](Addr).

pointer_type:firstclass(Type) <-
   pointer_type:component[Type] = Comp,
   type:firstclass(Comp).

pointer_type:integer(Type) <-
   pointer_type:component[Type] = Comp,
   integer_type(Comp).

pointer_type:fp(Type) <-
   pointer_type:component[Type] = Comp,
   fp_type(Comp).

pointer_type:struct(Type) <-
   pointer_type:component[Type] = Comp,
   struct_type(Comp).

pointer_type:vector(Type) <-
   pointer_type:component[Type] = Comp,
   vector_type(Comp).

pointer_type:array(Type) <-
   pointer_type:component[Type] = Comp,
   array_type(Comp).

schema:sanity()
 , pointer_type(Type)
 ->
   pointer_type:component[Type] = _.

schema:sanity()
 , pointer_type:component[_] = Comp
 ->
   !void_type[] = Comp,
   !label_type[] = Comp.


//----------------------
// Vector type
//----------------------

vector_type:component[Type] = Comp ->
   vector_type(Type), type(Comp).

vector_type:size[Type] = Size ->
   vector_type(Type), int[64](Size).

vector_type:integer(Type) <-
   vector_type:component[Type] = Comp,
   integer_type(Comp).

vector_type:i32(Type) <-
   vector_type:component[Type] = Comp,
   int32_type[] = Comp.

vector_type:fp(Type) <-
   vector_type:component[Type] = Comp,
   fp_type(Comp).

vector_type:boolean(Type) <-
   vector_type:component[Type] = Comp,
   boolean_type(Comp).

vector_type:pointer(Type) <-
   vector_type:component[Type] = Comp,
   pointer_type(Comp).


//------------------------------------------------------------------------------
// [Constraints and Vector Compatibiliry]
//
//  (1) A vector type requires a size (number of elements)
//      and a component type.
//  (2) The number of elements is a constant integer value
//      larger than 0.
//  (3) The component type can be any integer or floating point type,
//      or a pointer to these types.
//------------------------------------------------------------------------------

schema:sanity()
 , vector_type(Type)
 ->
   vector_type:component[Type] = _.

schema:sanity()
 , vector_type(Type)
 ->
   vector_type:size[Type] = _.

schema:sanity()
 , vector_type:size[_] = Size
 ->
   Size > 0.

schema:sanity()
 , vector_type:component[_] = Comp
 ->
   integer_type(Comp)
 ; fp_type(Comp)
 ; pointer_type(Comp).


//------------------------------------------------------------------------------
// The original version of the constraint contained these two atoms:
//   pointer_type:integer(Comp) ; pointer_type:fp(Comp)
// instead of the single:
//   pointer_type(Comp)
//
// In fact, the LLVM reference manual states that: /elementtype may be
// any integer or floating point type, or a pointer to these types./
//
// However, in practice we have seen that the LLVM IR supports
// pointers to arbitrary types, so we loosened this constaint as
// explained above.
//------------------------------------------------------------------------------


// Helper predicate

vector:eq_size_2(Type1, Type2) <-
   vector_type:size[Type1] = Size,
   vector_type:size[Type2] = Size.

vector:eq_size_3(Type1, Type2, Type3) <-
   vector_type:size[Type1] = Size,
   vector_type:size[Type2] = Size,
   vector_type:size[Type3] = Size.


// Two types are vector-compatible if:
//  (i)  neither is a vector, or
//  (ii) both are vectors of the same size.

vector:compatible(Type1, Type2) -> type(Type1), type(Type2).
vector:compatible(Type1, Type2) <-
   type(Type1),
   type(Type2),
   !vector_type(Type1),
   !vector_type(Type2).

vector:compatible(Type1, Type2) <-
   vector:eq_size_2(Type1, Type2).
