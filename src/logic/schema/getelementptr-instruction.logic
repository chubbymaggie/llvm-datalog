// http://llvm.org/docs/LangRef.html#getelementptr-instruction
// keywords: memory; instruction

getelementptr_instruction(Insn) -> instruction(Insn).
getelementptr_instruction:inbounds(Insn) -> getelementptr_instruction(Insn).

getelementptr_instruction:base[Insn] = Ptr ->
   getelementptr_instruction(Insn), operand(Ptr).


//------------------------------------------------------------------------------
// [GEP Indices]
//
// The remaining arguments are indices that indicate which of the
// elements of the aggregate object are indexed. The interpretation of
// each index is dependent on the type being indexed into.

// The first index always indexes the pointer value given as the first
// argument, the second index indexes a value of the type pointed to
// (not necessarily the value directly pointed to, since the first
// index can be non-zero), etc.  The first type indexed into must be a
// pointer value, subsequent types can be arrays, vectors, and
// structs. Note that subsequent types being indexed into can never be
// pointers, since that would require loading the pointer before
// continuing calculation.
//------------------------------------------------------------------------------


getelementptr_instruction:nindices[Insn] = Total ->
   getelementptr_instruction(Insn), int[64](Total).

getelementptr_instruction:index[Insn, Index] = Idx ->
   getelementptr_instruction(Insn), int[64](Index), operand(Idx).



// Auxiliary type predicates

getelementptr_instruction:base_type[Insn] = Type <-
   getelementptr_instruction:base[Insn] = Ptr,
   operand:type[Ptr] = Type.

getelementptr_instruction:index_type(Insn, Type) <-
   getelementptr_instruction:index[Insn, _] = Idx,
   operand:type[Idx] = Type.


//------------------------------------------------------------------------------
// [Determining Fields]
//
// !! In order to determine the exact field of the aggregate type
// which we're trying to extract, we must be able to compute the
// exact integer values that would be produced if we were to
// evaluate the indexing constants, so that we can match against
// the fields of the base argument !!
//
// We rely on a mapping from constant to integer (namely,
// `constant:to_int`), to get back the actual value of *any* arbitrarily
// complex constant index.
//------------------------------------------------------------------------------

instruction:next_index[Insn, Index] = Index + 1 <-
   getelementptr_instruction:index[Insn, Index] = _.

gep:vector_based(Insn) <-
   getelementptr_instruction:base[Insn] = Ptr,
   operand:type[Ptr] = Type,
   vector_type(Type).

getelementptr_instruction:interm_type[Insn, 1] = Comp <-
   getelementptr_instruction:base[Insn] = Ptr,
   operand:type[Ptr] = Type,
   pointer_type:component[Type] = Comp. // no vector-based filter here is needed

getelementptr_instruction:interm_type[Insn, 1] = Comp <-
   getelementptr_instruction:base[Insn] = Vector,
   operand:type[Vector] = Type,
   vector_type:component[Type] = Interm,
   pointer_type:component[Interm] = Comp.

getelementptr_instruction:interm_type[Insn, Next] = Comp <-
   getelementptr_instruction:interm_type[Insn, Index] = Type,
   array_type:component[Type] = Comp,
   instruction:next_index[Insn, Index] = Next.

getelementptr_instruction:interm_type[Insn, Next] = Comp <-
   getelementptr_instruction:interm_type[Insn, Index] = Type,
   vector_type:component[Type] = Comp,
   instruction:next_index[Insn, Index] = Next.

getelementptr_instruction:interm_type[Insn, Next] = Comp <-
   getelementptr_instruction:interm_type[Insn, Index] = Type,
   getelementptr_instruction:index[Insn, Index] = Idx,
   operand:as_constant[Idx] = Constant,
   constant:to_int[Constant] = Value, // Note: evaluated constant
   int32_type[] = i32,
   constant:type[Constant] = i32,   // c3
   struct_type:field[Type, Value] = Comp,
   instruction:next_index[Insn, Index] = Next.

getelementptr_instruction:value_type[Insn] = Type <-
   getelementptr_instruction:nindices[Insn] = Total,
   getelementptr_instruction:interm_type[Insn, Total] = Type.



//------------------------------------------------------------------------------
// [Constraints]
//
//  (1) The first operand of a ‘getelementptr' instruction is
//      always a pointer or a vector of pointers.
//  (2) The first type indexed into must be a pointer value,
//      subsequent types can be arrays, vectors, and structs.
//      (Note that subsequent types being indexed into can never
//      be pointers, since that would require loading the pointer
//      before continuing calculation.)
//
// The type of each index argument depends on the type it is
// indexing into:
//
//  (3) structure: only i32 integer constants are allowed (when
//      using a vector of indices they must all be the same i32
//      integer constant).
//  (4) array pointer or vector: integers of any width are allowed,
//      and they are not required to be constant.
//
//  (5) In cases where the pointer argument is a vector of pointers,
//      each index must be a vector with the same number of elements.
//
//  The ‘getelementptr‘ instruction returns a pointer to the element
//  specified by the indices.
//------------------------------------------------------------------------------


schema:sanity()
 , getelementptr_instruction(Insn)
 ->
   getelementptr_instruction:base[Insn] = _.

schema:sanity()
 , getelementptr_instruction(Insn)
 ->
   getelementptr_instruction:nindices[Insn] = _.

schema:sanity()
 , getelementptr_instruction(Insn)
 ->
   getelementptr_instruction:value_type[Insn] = _. // c2

schema:sanity()
 , getelementptr_instruction:base_type[_] = Type
 ->
   pointer_type(Type); vector_type:pointer(Type). // c1

schema:sanity()
 , getelementptr_instruction:index_type(_, Type)
 ->
   integer_type(Type); vector_type:integer(Type). // c4

schema:sanity()
 , getelementptr_instruction(Insn)
 , getelementptr_instruction:base_type[Insn] = Base
 , getelementptr_instruction:index_type(Insn, Idx)
 ->
   vector:compatible(Base, Idx). // c5

schema:sanity()
 , getelementptr_instruction:value_type[Insn] = Value
 , instruction:type[Insn] = Ptr
 ->
   gep:vector_based(Insn) ;
   pointer_type:component[Ptr] = Value. // creturn

schema:sanity()
 , gep:vector_based(Insn)
 , getelementptr_instruction:value_type[Insn] = Value
 , instruction:type[Insn] = Vector
 , vector_type:component[Vector] = Ptr
 ->
   pointer_type:component[Ptr] = Value. // creturn
