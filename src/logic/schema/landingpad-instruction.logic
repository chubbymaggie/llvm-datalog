// http://llvm.org/docs/LangRef.html#landingpad-instruction
// keywords: exception; instruction

landingpad_instruction(Insn) -> instruction(Insn).
landingpad_instruction:cleanup(Insn) -> landingpad_instruction(Insn).

// result type
landingpad_instruction:type[Insn] = Type ->
   landingpad_instruction(Insn), type(Type).

// personality function
landingpad_instruction:pers_fn[Insn] = Func ->
   landingpad_instruction(Insn), function_decl(Func).

landingpad_instruction:pers_fn[Insn] = PersFunction <-
   landingpad_instruction(Insn),
   instruction:function[Insn] = InFunction,
   function:pers_fn[InFunction] = FnConstant,
   function_constant(FnConstant),
   function_constant:function_name[FnConstant] = PersFnName,
   function:by_name[PersFnName] = PersFunction.

landingpad_instruction:pers_fn[Insn] = PersFunction <-
   landingpad_instruction(Insn),
   instruction:function[Insn] = InFunction,
   function:pers_fn[InFunction] = BitcastConstant,
   bitcast_constant_expression:from[BitcastConstant] = FnConstant,
   function_constant(FnConstant),
   function_constant:function_name[FnConstant] = PersFnName,
   function:by_name[PersFnName] = PersFunction.


//------------------------------------------------------------------------------
// [Landing Pad]
//
// A landing pad block is a basic block which is the unwind
// destination of an ‘invoke‘ instruction.
//
// A landing pad block must have a ‘landingpad‘ instruction as its
// first non-PHI instruction.
//
//
// In order to compute the first non-phi instruction per landing pad,
// we first have to record its segment of consecutive phi-instructions
// from its starting point, encoded in predicate `landingpad:phi'.
//
// The first *non-phi* instruction of a landing pad may be either
// (i) its first instruction, or (ii) the first non-phi instruction
// that follows the segment described above.
//
// The landing pad block cannot contain any other landing pad
// instructions, except this one.
//------------------------------------------------------------------------------


// Landing Pad Definition

landingpad(BB) -> basicblock(BB).
landingpad(BB) <-
   invoke_instruction:exception_label[_] = Label,
   basicblock:by_label[Label] = BB.


// Compute the segment of consecutive phi-instructions from starting
// point, per landing pad.

landingpad:phi(BB, Insn) <-
   basicblock:first[BB] = Insn,
   landingpad(BB),
   phi_instruction(Insn).

landingpad:phi(BB, Insn) <-
   instruction:next[Prev] = Insn,
   landingpad:phi(BB, Prev),
   instruction:basicblock[Prev] = BB,
   instruction:basicblock[Insn] = BB,
   phi_instruction(Insn).


// Compute the first non-phi instruction, per landing pad.

landingpad:firstnonphi[BB] = Insn <-
   basicblock:first[BB] = Insn,
   landingpad(BB),
   !phi_instruction(Insn).

landingpad:firstnonphi[BB] = Insn <-
   instruction:next[Prev] = Insn,
   landingpad:phi(BB, Prev),
   instruction:basicblock[Prev] = BB,
   instruction:basicblock[Insn] = BB,
   !phi_instruction(Insn).


// Same as above, via different computation.

landingpad:start[BB] = Insn <-
   landingpad_instruction(Insn),
   instruction:basicblock[Insn] = BB,
   landingpad(BB).


// Sanity Check: the two instructions must coincide.
schema:sanity()
 , landingpad:start[BB] = Insn
 ->
   landingpad:firstnonphi[BB] = Insn.



//------------------------------------------------------------------------------
// [Clauses]
//
// A clause begins with the clause type — catch or filter — and
// contains the global variable representing the “type” that may be
// caught or filtered respectively.
//
// Unlike the catch clause, the filter clause takes an array
// constant as its argument.
//------------------------------------------------------------------------------


// Clauses as entities

clause(Clause) -> .
catch_clause(Clause) -> clause(Clause).
filter_clause(Clause) -> clause(Clause).


// Enforce that clause is an abstract type
schema:sanity()
 , clause(Clause)
 ->
   catch_clause(Clause) ; filter_clause(Clause).


// Clause Constructor

clause:by_index[Insn, Index] = Clause ->
   landingpad_instruction(Insn), int[64](Index), clause(Clause).

lang:physical:storageModel[`clause] = "ScalableSparse".
lang:constructor(`clause:by_index).


// Clause Predicates

catch_clause:arg[Clause] = Arg ->
   catch_clause(Clause), constant(Arg).

filter_clause:arg[Clause] = Arg ->
   filter_clause(Clause), constant(Arg).

landingpad_instruction:clause[Insn, Index] = Clause ->
   landingpad_instruction(Insn), int[64](Index), clause(Clause).

landingpad_instruction:nclauses[Insn] = Total ->
   landingpad_instruction(Insn), int[64](Total).


// see auxiliary logic

lang:derivationType[`landingpad_instruction:clause] = "DerivedAndStored".
lang:derivationType[`catch_clause:arg] = "DerivedAndStored".
lang:derivationType[`filter_clause:arg] = "DerivedAndStored".


//-------------------------------------------------------------------------
// [Constraints]
//
// The landingpad instruction has several restrictions:
//  (1) A landing pad block is a basic block which is the unwind
//      destination of an ‘invoke‘ instruction. (See
//      invoke-instruction.)
//  (2) A landing pad block must have a ‘landingpad‘ instruction
//      as its first non-PHI instruction.
//  (3) There can be only one ‘landingpad‘ instruction within the
//      landing pad block.
//  (4) A basic block that is not a landing pad block may not include
//      a ‘landingpad‘ instruction.
//  (5) All ‘landingpad‘ instructions in a function must have the same
//      personality function.
//  (6) The ‘landingpad‘ instruction must contain at least one clause
//      or the cleanup flag.
//-------------------------------------------------------------------------


// Additional type constraints not mentioned above
schema:sanity()
 , filter_clause:arg[_] = Arg
 , constant:type[Arg] = Type
 ->
   array_type(Type).

schema:sanity()
 , landingpad_instruction:type[Insn] = Type
 ->
   instruction:type[Insn] = Type.


// 1st Constraint is omitted, since it is not really a constraint,
// rather than a definition of a landing pad (already encoded in the
// relevant section)


// 2nd Constraint: first non-phi instruction must be a landing pad
// instruction (i.e., its only landing pad instruction)
schema:sanity()
 , landingpad:firstnonphi[BB] = Insn
 ->
   landingpad:start[BB] = Insn.


// 3rd Constraint: is encoded as a functional dependency violation
// above; see landingpad:start definition


// 4th Constraint: only landing pad blocks may contain landing pad
// instructions
schema:sanity()
 , landingpad_instruction(Insn), instruction:basicblock[Insn] = BB
 ->
   landingpad(BB).


// 5th Constraint: all ‘landingpad‘ instructions in a function must
// have the same personality function
schema:sanity()
 , landingpad_instruction:pers_fn[Insn1] = Pers
 , landingpad_instruction(Insn1)
 , landingpad_instruction(Insn2)
 , instruction:function[Insn1] = Func
 , instruction:function[Insn2] = Func
 ->
   landingpad_instruction:pers_fn[Insn2] = Pers.


// 6th Constraint: the ‘landingpad‘ instruction must contain at least
// one clause or the cleanup flag
schema:sanity()
 , landingpad_instruction(Insn)
 ->
   landingpad_instruction:cleanup(Insn) ;
   landingpad_instruction:clause[Insn, 0] = _.
