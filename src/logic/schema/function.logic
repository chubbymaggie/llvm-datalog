// http://llvm.org/docs/LangRef.html#functions

//-----------------------------------------
// Function definitions and declarations
//-----------------------------------------

function_decl(Func), function_decl:id(Func:Ref) -> string(Ref).
function(Func) -> function_decl(Func).

// !! Note: A function definition is encoded as a subtype of function
// declaration, that adds a body of instructions. !!


// TODO: how are varargs represented here?


//---------------------------------
// Mandatory name and type info
//---------------------------------

function:type[Func] = Type ->
   function_decl(Func), function_type(Type).

function:name[Func] = Name ->
   function_decl(Func), string(Name).

function:by_name[Name] = Func <-
   function:name[Func] = Name.

// Unmangled name with type signature
function:signature[Func] = Signature ->
   function_decl(Func), string(Signature).

schema:sanity()
 , function_decl(Func)
 ->
   function:type[Func] = _.

schema:sanity()
 , function_decl(Func)
 ->
   function:name[Func] = _.


//----------------------------------------
// Variables and Constants contained
//----------------------------------------

constant:in_function[Constant] = Function <-
   constant:__token1[Constant] = Fn,
   function:by_name["@" + Fn] = Function.

variable:in_function[Var] = Function <-
   variable:descriptor(Var, _, FuncName, _, _),
   function:by_name[FuncName] = Function.

operand:in_function[Operand] = Function <-
   operand:by_variable[Var] = Operand,
   variable:in_function[Var] = Function.

operand:in_function[Operand] = Function <-
   operand:by_constant[Constant] = Operand,
   constant:in_function[Constant] = Function.

// Mandatory property (variable only, since constants may be global)

variable(Var)
 ->
   variable:in_function[Var] = _.


//-----------------------------------------------------------------
// Optional function attributes (common for both declarations and
// definitions)
//-----------------------------------------------------------------

function:linkage_type[Func] = Link ->
   function_decl(Func), linkage_type(Link).

function:visibility[Func] = Vis ->
   function_decl(Func), visibility(Vis).

function:calling_convention[Func] = Conv ->
   function_decl(Func), calling_convention(Conv).

function:unnamed_addr(Func) ->
   function_decl(Func).

function:alignment[Func] = Alignment ->
   function_decl(Func), int[64](Alignment).

function:gc[Func] = CollectorName ->
   function_decl(Func), string(CollectorName).

function:pers_fn[Func] = PersonalityFunction ->
   function_decl(Func), constant(PersonalityFunction).

function:attribute(Func, Attr) ->
   function_decl(Func), attribute(Attr).

//-----------------------------------------------------------------
// Optional function attributes (only for definitions)
//-----------------------------------------------------------------

function:section[Func] = Sect ->
   function(Func), string(Sect).


//----------------------------------
// Function (Formal) Parameters
//----------------------------------

function:nparams[Func] = Total ->
   function(Func), int[64](Total).

function:nparams[Func] = Total <-
   function(Func),
   function:type[Func] = Type,
   function_type:nparams[Type] = Total.

function:param[Func, Index] = Param ->
   function(Func), int[64](Index), variable(Param).


//------------------------------------------------------------------------------
// [Parameter Attributes]
//
// The return type and each parameter of a function type may have
// a set of parameter attributes associated with them.
//
// Parameter attributes are used to communicate additional information
// about the result or parameters of a function.
//
// Parameter attributes are considered to be part of the function,
// not of the function type, so functions with different parameter
// attributes can have the same function type.
//
// Parameter attributes are simple keywords that follow the type specified.
// If multiple parameter attributes are needed, they are space separated.
//------------------------------------------------------------------------------

function:return_attribute(Func, Attr) ->
   function_decl(Func), attribute(Attr).

function:param_attribute(Func, Index, Attr) ->
   function_decl(Func), int[64](Index), attribute(Attr).

// Parameter is passed by value
function:param_by_value(Func, Index) <-
   parameter_attribute:byval[] = ByValue,
   function:param[Func, Index] = _,
   function:param_attribute(Func, Index, ByValue).


//------------------------------------------------------------------------------
// [Constraints]
//
// Number and types of parameters must match those declared
// in the function type.
//
// The return type must also be compatible for the function
// to be well-formed, but this is checked in ret-instruction
// logic.
//------------------------------------------------------------------------------

schema:sanity()
 , function:type[Func] = Type
 , function_type:param[Type, Index] = ParamType
 , function:param[Func, Index] = Param
 ->
   variable:type[Param] = ParamType.

schema:sanity()
 , function(Func)
 , function:type[Func] = Type
 , function_type:param[Type, Index] = _
 ->
   function:param[Func, Index] = _.

schema:sanity()
 , function:type[Func] = Type
 , function:param[Func, Index] = _
 ->
   function_type:param[Type, Index] = _.
