///------------------------------------------
/// Tracking of allocation size
///------------------------------------------

// Indicates an array allocation instead of a single element

array_allocation(Alloc) <-
   allocation:type[Alloc] = Type,
   array_type(Type).


//-----------------------
// Stack Allocations
//-----------------------

// An array of elements is allocated in stack, if a size argument is
// provided to the `alloca` instruction

array_allocation(StackAlloc) <-
   alloca_instruction:size[Insn] = _,
   stack_allocation:by_instruction[Insn] = StackAlloc.

// The size in bytes can be computed by the size of the allocation
// types and the number of elements being allocated (if a constant
// operand was provided).

allocation:size[StackAlloc] = NumElements * Size <-
   alloca_instruction:size[Insn] = Operand,
   operand:to_int[Operand] = NumElements,
   stack_allocation:by_instruction[Insn] = StackAlloc,
   allocation:type[StackAlloc] = Type,
   type:size[Type] = Size.

allocation:size[StackAlloc] = Size <-
   alloca_instruction(Insn),
   !alloca_instruction:size[Insn] = _,
   stack_allocation:by_instruction[Insn] = StackAlloc,
   allocation:type[StackAlloc] = Type,
   type:size[Type] = Size.

allocation:size[StackAlloc] = Size <-
   stack_allocation:by_parameter[_, _] = StackAlloc,
   allocation:type[StackAlloc] = Type,
   type:size[Type] = Size.


//-----------------------
// Heap Allocations
//-----------------------

array_allocation(HeapAlloc) <-
   heap_allocation:by_malloc[Insn] = HeapAlloc,
   call_instruction:arg[Insn, 0] = Operand,
   operand:as_variable[Operand] = _.

array_allocation(HeapAlloc) <-
   heap_allocation:by_realloc[Insn] = HeapAlloc,
   call_instruction:arg[Insn, 1] = Operand,
   operand:as_variable[Operand] = _.

array_allocation(HeapAlloc) <-
   heap_allocation:by_calloc[Insn] = HeapAlloc,
   call_instruction:arg[Insn, _] = Operand,
   operand:as_variable[Operand] = _.

// Compute sizes when available

allocation:size[HeapAlloc] = Size <-
   heap_allocation:by_instruction[Insn] = HeapAlloc,
   sized_alloc_instr[Insn] = Size.

// First compute size of allocation instruction, if statically
// available

sized_alloc_instr[Insn] = Size ->
   instruction(Insn), int[64](Size).

sized_alloc_instr[Insn] = Size <-
   function:by_name["@malloc"] = Func,
   call_instruction:function[Insn] = Func,
   call_instruction:arg[Insn, 0] = Operand,
   operand:to_int[Operand] = Size.

sized_alloc_instr[Insn] = Size <-
   function:by_name["@malloc"] = Func,
   invoke_instruction:function[Insn] = Func,
   invoke_instruction:arg[Insn, 0] = Operand,
   operand:to_int[Operand] = Size.

sized_alloc_instr[Insn] = Size <-
   function:by_name["@realloc"] = Func,
   call_instruction:function[Insn] = Func,
   call_instruction:arg[Insn, 1] = Operand,
   operand:to_int[Operand] = Size.

sized_alloc_instr[Insn] = Size <-
   function:by_name["@realloc"] = Func,
   invoke_instruction:function[Insn] = Func,
   invoke_instruction:arg[Insn, 1] = Operand,
   operand:to_int[Operand] = Size.

sized_alloc_instr[Insn] = Size * Nmemb <-
   function:by_name["@calloc"] = Func,
   call_instruction:function[Insn] = Func,
   call_instruction:arg[Insn, 0] = NmembOp,
   call_instruction:arg[Insn, 1] = SizeOp,
   operand:to_int[NmembOp] = Nmemb,
   operand:to_int[SizeOp] = Size.

sized_alloc_instr[Insn] = Size * Nmemb <-
   function:by_name["@calloc"] = Func,
   invoke_instruction:function[Insn] = Func,
   invoke_instruction:arg[Insn, 0] = NmembOp,
   invoke_instruction:arg[Insn, 1] = SizeOp,
   operand:to_int[NmembOp] = Nmemb,
   operand:to_int[SizeOp] = Size.
