//-----------------------------------------------------------------------
// [Basic Concepts of Pointer Analysis]
//-----------------------------------------------------------------------

// The following relation tracks the flow of allocations to program
// variables. Named variables will point to their respective stack
// allocations.

var_points_to(Alloc, Var) ->
   allocation(Alloc), variable(Var).


// This is the equivalent relation that tracks flow of allocations
// among program constants. Note that references to global variables
// or functions are considered a type of constant in LLVM IR. Constant
// addresses are another type of constant that may point to
// memory. Moreover, a constant may be expanded to a larger complext
// constant (e.g., by a `bitcast` expression), through constant
// expressions.
//
// It is essential to be able to track the flow of allocations through
// all these types of constants, since an arbitrary complex constant
// expression may be used as an operand to a `store` or `load`
// instruction.

constant_points_to[Constant] = Alloc ->
   allocation(Alloc), constant(Constant).


// Intermediate relations

operand_points_to(Alloc, Operand) ->
   allocation(Alloc), operand(Operand).

operand_points_to(Alloc, VarOperand) <-
   operand:as_variable[VarOperand] = PtrVar,
   var_points_to(Alloc, PtrVar).

operand_points_to(Alloc, ConstantOperand) <-
   operand:as_constant[ConstantOperand] = Constant,
   constant_points_to[Constant] = Alloc.


//----------------------------
// Dereferencing Pointers
//----------------------------

// This is the traditional concept of `points-to`. It signifies that
// an allocation will point to another memory allocation when
// dereferenced.

ptr_points_to(Alloc, PtrAlloc) ->
   allocation(Alloc), allocation(PtrAlloc).
