//------------------------------------------------------------------------------
// [Field Sensitive treatment of `getelementptr` instructions]
//
// We create subregions on the fly to act as destinations of
// instructions that may point to an allocation at some
// *offset*. Essentially, we create complex allocations paired with
// access paths in a demand-driven way, according to the given indices
// of some GEP instruction where an existing allocation is used as the
// base operand.

// Note that a subregion allocation created at some GEP instruction
// will be identified and used by other instructions too that happen
// to reference the same base allocation with the same offset.
//
// We filter null and other pseudo-allocations without depth by
// requiring that the base of the new region should itself have a
// depth.
//------------------------------------------------------------------------------


// Compute intermediate points to for `getelementptr` instruction up
// to some index

gep_points_to(Insn, Index, Alloc) ->
   getelementptr_instruction(Insn),
   int[64](Index),
   allocation(Alloc).

gep_points_to(Insn, Index, Alloc) <-
   gep_points_to(Insn, Index, SomeAlloc),
   alloc_aliases(Alloc, SomeAlloc).

gep_points_to(Insn, 0, Alloc) <-
   !gep:vector_based(Insn),
   getelementptr_instruction:base[Insn] = Base,
   operand_points_to(Alloc, Base).
// TODO check type compatibility


// Introduce inverted predicate to optimize indexing
_inv_gep_points_to(Alloc, Index, Insn) <-
   gep_points_to(Insn, Index, Alloc).


// Guard configuration predicate for pointer arithmetic support
analyze_pointer_arithmetic() -> .


//------------------------------------------------------------------------------
// For the first index of the GEP instruction
//------------------------------------------------------------------------------

// We point to the aliased zero index of a base allocation, as if it
// had been an array allocation, whenever the base allocation flows to
// the address operand of some GEP instruction.

gep_points_to(Insn, 0, ZeroAliasAlloc)
 <-
   gep_points_to(Insn, 0, Alloc),
   // first index can be anything
   getelementptr_instruction:index[Insn, 0] = _,
   // base object
   basic_allocation(Alloc),
   alloc_subregion:at_array_index[Alloc, 0] = ZeroAliasAlloc.


// 1. First zero index is ignored when address operand points-to
// non-base object.

_gep_with_zero_base_offset(Insn) <-
   getelementptr_instruction:index[Insn, 0] = IndexOp,
   operand:to_int[IndexOp] = 0.

gep_points_to(Insn, 1, Alloc)
 <-
   _gep_with_zero_base_offset(Insn),
   gep_points_to(Insn, 0, Alloc),
   alloc_subregion(Alloc).


// 2. The first non-zero index must be added to the previous index of
// the allocation to produce a new offset

// GEP instruction has non-zero base offset
_gep_with_nonzero_base_offset[Insn] = Index <-
   getelementptr_instruction:index[Insn, 0] = IndexOp,
   operand:to_int[IndexOp] = Index,
   Index != 0.

_nonzero_gep_points_to(Insn, DeclaredType, Index, Alloc) <-
   _inv_gep_points_to(Alloc, 0, Insn),
   // constant non-zero first index
   _gep_with_nonzero_base_offset[Insn] = Index,
   getelementptr_instruction:interm_type[Insn, 1] = DeclaredType.


/// 2.1 Offset exists

// Two array subobjects at relative offset
_array_subobjects_at_rel_offset[Alloc, Offset] = NewAlloc <-
   alloc_subregion:at_array_index[Base, Index] = Alloc,
   alloc_subregion:at_array_index[Base, Index + Offset] = NewAlloc.

gep_points_to(Insn, 1, NewAlloc)
 <-
   _nonzero_gep_points_to(Insn, DeclaredType, Index, Alloc),
   // get existing allocation at new index (when such exists)
   _array_subobjects_at_rel_offset[Alloc, Index] = NewAlloc,
   // check for type compatibility
   allocation:type[NewAlloc] = Type, // old type may not be compatible
   type_compatible(Type, DeclaredType).


/// 2.2 Pointer offset doesn't exist

// Get star object pointer, given a pointer to a base object
_star_subobj_of_base_subobj(NewAlloc, Index, Alloc) <-
   basic_allocation(Base),
   alloc_subregion:at_array_index[Base, Index] = Alloc,
   alloc_subregion:at_any_array_index[Base] = NewAlloc.

gep_points_to(Insn, 1, NewAlloc)
 <-
   // This rule may be turned on/off via configuration
   analyze_pointer_arithmetic(),
   // GEP instruction to non-zero Index where base points to Alloc
   _nonzero_gep_points_to(Insn, DeclaredType, Index, Alloc),
   // get star pointer object
   _star_subobj_of_base_subobj(NewAlloc, OtherIndex, Alloc),
   // new index doesn't exist
   Offset = OtherIndex + Index,
   !pointer_index(Offset),
   // check for type compatibility
   allocation:type[NewAlloc] = Type, // old type may not be compatible
   type_compatible(Type, DeclaredType).


/// 2.3 Array offset doesn't exist

// Get star subobject, given an array subobject
_star_subobj_of_array_subobj(NewAlloc, BaseType, Index, Alloc) <-
   allocation:type[Base] = BaseType,
   array_type(BaseType),
   alloc_subregion:at_array_index[Base, Index] = Alloc,
   alloc_subregion:at_any_array_index[Base] = NewAlloc.

gep_points_to(Insn, 1, NewAlloc)
 <-
   // This rule may be turned on/off via configuration
   analyze_pointer_arithmetic(),
   // GEP instruction to non-zero Index where base points to Alloc
   _nonzero_gep_points_to(Insn, DeclaredType, Index, Alloc),
   // get star array subobject
   _star_subobj_of_array_subobj(NewAlloc, BaseType, OtherIndex, Alloc),
   // new index doesn't exist (over-approximation to avoid NTR)
   Offset = OtherIndex + Index,
   type_compatible(BaseType, SomeType),
   !array_indices:__no_typecomp(SomeType, Offset),
   // check for type compatibility
   allocation:type[NewAlloc] = Type, // old type may not be compatible
   type_compatible(Type, DeclaredType).


// 3. The first index, if unknown, must be used to generate a new
// star-index allocation that replaces the older constant index

_gep_with_unknown_base_offset(Insn) <-
   getelementptr_instruction:index[Insn, 0] = IndexOp,
   !operand:to_int[IndexOp] = _.

_unknown_gep_points_to(Insn, DeclaredType, Alloc) <-
   _inv_gep_points_to(Alloc, 0, Insn),
   _gep_with_unknown_base_offset(Insn),
   getelementptr_instruction:interm_type[Insn, 1] = DeclaredType.

gep_points_to(Insn, 1, NewAlloc)
 <-
   _unknown_gep_points_to(Insn, DeclaredType, Alloc),
   // check for type compatibility
   allocation:type[Alloc] = Type,
   type_compatible(Type, DeclaredType),
   // allocation pointed to some specific (known) element
   alloc_subregion:at_array_index[Base, _] = Alloc,
   alloc_subregion:at_any_array_index[Base] = NewAlloc,
   alloc_subregion:base[Alloc] = Base. // OPT: redundant clause


// 4. First index is also ignored when address points-to non-base
// object with variable array index, since adding the new first index
// will not change anything. Thus, it suffices to propagate the
// existing allocation

gep_points_to(Insn, 1, Alloc)
 <-
   gep_points_to(Insn, 0, Alloc),
   alloc_subregion:at_any_array_index[Base] = Alloc,
   alloc_subregion:base[Alloc] = Base. // OPT: redundant clause


// 5. When address operand points to base object, then we must record
// the index accordingly

_gep_addr_points_to_baseobj(Alloc, Insn) <-
   gep_points_to(Insn, 0, Alloc),
   getelementptr_instruction:interm_type[Insn, 1] = DeclaredType,
   // check for type compatibility
   allocation:type[Alloc] = Type,
   type_compatible(Type, DeclaredType),
   // base object
   basic_allocation(Alloc).

gep_points_to(Insn, 1, Region)
 <-
   // GEP instruction points to base allocation
   _gep_addr_points_to_baseobj(Alloc, Insn),
   // first index is a constant
   getelementptr_instruction:index[Insn, 0] = IndexOp,
   operand:to_int[IndexOp] = Index,
   // get subojbect at this array index
   alloc_subregion:at_array_index[Alloc, Index] = Region.

gep_points_to(Insn, 1, Region)
 <-
   // GEP instruction points to base allocation
   _gep_addr_points_to_baseobj(Alloc, Insn),
   // first index is a variable
   getelementptr_instruction:index[Insn, 0] = IndexOp,
   !operand:to_int[IndexOp] = _,
   // get subobject at star array index
   alloc_subregion:at_any_array_index[Alloc] = Region.


// 6. It also possible that a struct type is treated as an array of
// bytes, in which case we must match the byte offset to some field

gep_points_to(Insn, 1, Region)
 <-
   gep_points_to(Insn, 0, Alloc),
   // Base type of GEP is pointer to i8
   getelementptr_instruction:base_type[Insn] = PtrType,
   pointer_type:component[PtrType] = i8,
   int8_type[] = i8,
   // first index is a constant
   getelementptr_instruction:index[Insn, 0] = IndexOp,
   operand:to_int[IndexOp] = Offset,
   // match byte offset to field
   allocation:type[Alloc] = Type,
   struct_type(Type),
   struct_type:field_offset[Type, Field] = Offset,
   // get subobject of this field
   alloc_subregion:at_field[Alloc, Field] = Region.


//------------------------------------------------------------------------------
// For the rest of the indices of the GEP instruction
//------------------------------------------------------------------------------

gep_interm_points_to_array(Insn, Index, Alloc)
 <-
   gep_points_to(Insn, Index, Alloc),
   getelementptr_instruction:interm_type[Insn, Index] = DeclaredType,
   // check for type compatibility
   allocation:type[Alloc] = Type,
   array_type(Type),
   array_type(DeclaredType),
   type_compatible(Type, DeclaredType),
   alloc_subregion(Alloc).

// Case of unknown index

gep_points_to(Insn, NextIndex, Region)
 <-
   gep_interm_points_to_array(Insn, Index, Alloc),
   // variable array index
   getelementptr_instruction:index[Insn, Index] = IndexOp,
   !operand:to_int[IndexOp] = _,
   // NextIndex = Index + 1
   instruction:next_index[Insn, Index] = NextIndex,
   // get subobject at *star* (unknown) index
   alloc_subregion:at_any_array_index[Alloc] = Region.


// Case of known constant index

gep_points_to(Insn, NextIndex, Region)
 <-
   gep_interm_points_to_array(Insn, Index, Alloc),
   // get constant array index (as integer)
   getelementptr_instruction:index[Insn, Index] = IndexOp,
   operand:to_int[IndexOp] = ConstantIndex,
   // NextIndex = Index + 1
   instruction:next_index[Insn, Index] = NextIndex,
   // get subobject for given array index
   alloc_subregion:at_array_index[Alloc, ConstantIndex] = Region.


// Case of field access

gep_points_to(Insn, NextIndex, Region)
 <-
   gep_points_to(Insn, Index, Alloc),
   getelementptr_instruction:interm_type[Insn, Index] = DeclaredType,
   // check for type compatibility
   allocation:type[Alloc] = Type,
   struct_type(Type),
   struct_type(DeclaredType),
   type_compatible:up_to_field(Type, DeclaredType, Field),
   // get field (as integer constant)
   getelementptr_instruction:index[Insn, Index] = IndexOp,
   operand:to_int[IndexOp] = Field,
   // NextIndex = Index + 1
   instruction:next_index[Insn, Index] = NextIndex,
   // get subobject for given field
   alloc_subregion:at_field[Alloc, Field] = Region.



// The destination variable holds the allocation pointed by the last
// index of the associated `getelementptr` instruction

var_points_to(Alloc, ToVar) <-
   getelementptr_instruction:nindices[Insn] = Total,
   gep_points_to(Insn, Total, Alloc),
   instruction:to[Insn] = ToVar.
// TODO type compatibility
