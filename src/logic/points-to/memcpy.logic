//-------------------------------------------------------------------
// [Memcpy instructions]
//
//  We must treat `memcpy` instructions in such a way as to ensure
//  that it may change the points-to set of any subregion of memory
//  that is being copied.
//-------------------------------------------------------------------

// Overloaded `memcpy` predicates that will trigger the deep copy
// semantics for the corresponding allocations they point to

memcpy:to_operand(Insn, To, From) ->
   instruction(Insn), operand(To), operand(From).

memcpy:to_var(Insn, To, From) ->
   instruction(Insn), variable(To), operand(From).

// Bitwise copy semantics that respect type information

memcpy(Insn, To, From) ->
   instruction(Insn), allocation(To), allocation(From).

// Lose instruction and invert FROM and TO for optimal indexing
_memcpy_without_insn(From, To) <-
   memcpy(_, To, From).

_memcpy_to_ptr(To, From) <-
   _memcpy_without_insn(From, To),
   ptr_compatible_allocation(To).

// Copy points-to set of copied objects

ptr_points_to(Alloc, To) <-
   _memcpy_to_ptr(To, From),
   ptr_points_to(Alloc, From).

// Base case of `memcpy` call instructions It should handle syntactic
// aliases. For instance `memcpy(to,from)` is equivalent to
// `memcpy(to, &from[0])`. We consider all possible aliases of the
// base objects that flow to the operands of the @memcpy instruction,
// but only keep type compatible pairs.

memcpy:to_operand(CallInsn, To, From) <-
   function:name[Callee] = Name,
   ( string:like(Name, "@memcpy%")
   ; string:like(Name, "@llvm.memcpy%") ),
   callgraph:edge(Callee, CallInsn),
   call_instruction:arg[CallInsn, 0] = To,
   call_instruction:arg[CallInsn, 1] = From.

memcpy(CallInsn, AliasedTo, AliasedFrom) <-
   memcpy:to_operand(CallInsn, To, From),
   operand_points_to(FromAlloc, From),
   operand_points_to(ToAlloc, To),
   // consider any possible aliases
   alloc_aliases(AliasedTo, ToAlloc),
   alloc_aliases(AliasedFrom, FromAlloc),
   // check type compatibility
   allocation:type[AliasedTo] = ToType,
   allocation:type[AliasedFrom] = FromType,
   type_compatible(FromType, ToType).

memcpy(CallInsn, AliasedTo, AliasedFrom) <-
   memcpy:to_var(CallInsn, To, From),
   operand_points_to(FromAlloc, From),
   var_points_to(ToAlloc, To),
   // consider any possible aliases
   alloc_aliases(AliasedTo, ToAlloc),
   alloc_aliases(AliasedFrom, FromAlloc),
   // check type compatibility
   allocation:type[AliasedTo] = ToType,
   allocation:type[AliasedFrom] = FromType,
   type_compatible(FromType, ToType).


// Recursive case for `memcpy` call instructions
//
// !! Note that in the following cases we have to create the
// destination subobject if it does not exist already, since we cannot
// afford to miss its points-to set because it may be copied to more
// generic objects that contain star expressions !!

memcpy(Insn, DestSubobject, SrcSubobject)
 <-
   memcpy(Insn, DestObject, SrcObject),
   // get source and destination subobjects for given field
   alloc_subregion:at_field[SrcObject, Field] = SrcSubobject,
   alloc_subregion:at_field[DestObject, Field] = DestSubobject,
   // check for type compatibility
   allocation:type[SrcSubobject] = SrcType,
   allocation:type[DestSubobject] = DestType,
   type_compatible(SrcType, DestType).


memcpy(Insn, DestSubobject, SrcSubobject)
 <-
   memcpy(Insn, DestObject, SrcObject),
   // get source and destination subobjects
   alloc_subregion:at_array_index[SrcObject, Index] = SrcSubobject,
   alloc_subregion:at_array_index[DestObject, Index] = DestSubobject,
   // check for type compatibility
   allocation:type[SrcSubobject] = SrcType,
   allocation:type[DestSubobject] = DestType,
   type_compatible(SrcType, DestType).


memcpy(Insn, DestSubobject, SrcSubobject)
 <-
   memcpy(Insn, DestObject, SrcObject),
   // get source and destination subobjects for star index
   alloc_subregion:at_any_array_index[SrcObject] = SrcSubobject,
   alloc_subregion:at_any_array_index[DestObject] = DestSubobject,
   // check for type compatibility
   allocation:type[SrcSubobject] = SrcType,
   allocation:type[DestSubobject] = DestType,
   type_compatible(SrcType, DestType).
