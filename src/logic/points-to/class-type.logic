//-----------------
// Class Types
//-----------------

// Class types are a subset of struct types
class_type(Type) -> struct_type(Type).

// The name (as it appears in source code) of the class
// type, including any template parameters
class_type:name[Type] = Name ->
   struct_type(Type), string(Name).

// Unless debug info has been loaded, we follow a heuristic approach
// to identify class types, by searching for struct types with a
// specific prefix (namely, `%class.`).
class_type(Type) <-
   !debuginfo:loaded(),
   struct_type(Type), type:id(Type:FQName), string:like(FQName, "%%class.%").

class_type:name[Type] = Name <-
   !debuginfo:loaded(),
   struct_type(Type), !template_type(Type),
   type:id(Type:FQName),
   string:like(FQName, "%%class.%"),
   string:length[FQName] = N,
   string:substring[FQName, 7, N - 7] = Name.

class_type:name[Type] = Name <-
   !debuginfo:loaded(),
   struct_type(Type), !template_type(Type),
   type:id(Type:FQName),
   string:like(FQName, "%%struct.%"),
   string:length[FQName] = N,
   string:substring[FQName, 8, N - 8] = Name.


//------------------------------------------------------------------------------
// Virtual Table - Type Info - Class Type Associations
//
// Note that we cannot associate typeinfo with a class type via its
// v-table. Such an approach would not work for external typeinfo
// symbols, since they lack any v-table.
//------------------------------------------------------------------------------

vtable:typeinfo[VT] = TypeInfo -> // defined in virtual-tables.logic
   global_variable(VT), global_variable(TypeInfo).

class_type:vtable[ClassType] = VT ->
   struct_type(ClassType), global_variable(VT).

class_type:typeinfo[ClassType] = TypeInfo ->
   struct_type(ClassType), global_variable(TypeInfo).


// Extract class name from unmangled type info name. The latter is of
// the form: typeinfo for CLASS-NAME
_typeinfo_class_name[TypeInfo] = ClassName <-
   typeinfo(TypeInfo),
   global_variable:unmangled_name[TypeInfo] = TIName,
   string:like(TIName, "typeinfo for %"),
   string:length[TIName] = N,
   string:substring[TIName, 13, N - 13] = ClassName.

_typeinfo_by_class_name[ClassName] = TypeInfo <-
   _typeinfo_class_name[TypeInfo] = ClassName.

// typeinfo of class
class_type:typeinfo[ClassType] = TypeInfo <-
   class_type:name[ClassType] = ClassName,
   _typeinfo_by_class_name[ClassName] = TypeInfo.


// Extract class name from unmangled vtable name. The latter is of the
// form: vtable for CLASS-NAME
_vtable_class_name[VTable] = ClassName <-
   vtable(VTable, _),
   global_variable:unmangled_name[VTable] = UnmangledName,
   string:like(UnmangledName, "vtable for %"),
   string:length[UnmangledName] = N,
   string:substring[UnmangledName, 11, N - 11] = ClassName.

_vtable_by_class_name[ClassName] = VTable <-
   _vtable_class_name[VTable] = ClassName.

// v-table of class
class_type:vtable[ClassType] = VTable <-
   class_type:name[ClassType] = ClassName,
   _vtable_class_name[VTable] = ClassName,
   _vtable_by_class_name[ClassName] = VTable.

// Sanity check
class_type:vtable[ClassType] = VTable
 , vtable:typeinfo[VTable] = TypeInfo
 ->
   class_type:typeinfo[ClassType] = TypeInfo.


//------------------------------------------------------------------------------
// Recovering Class Hierarchy
//------------------------------------------------------------------------------

primary_superclass[Type] = Supertype ->
   struct_type(Type), struct_type(Supertype).

secondary_superclass(Supertype, Type) ->
   struct_type(Type), struct_type(Supertype).

// From typeinfo to class type
_typeinfo_class_type[TypeInfo] = ClassType <-
   !unpadded_struct_type(ClassType),
   !template_typeinfo(TypeInfo),
   !template_type(ClassType),
   class_type:typeinfo[ClassType] = TypeInfo.

_typeinfo_class_type[TypeInfo] = ClassType <-
   !unpadded_struct_type(ClassType),
   template_typeinfo(TypeInfo),
   template_type(ClassType),
   class_type:typeinfo[ClassType] = TypeInfo.

primary_superclass[Type] = Supertype <-
   typeinfo:base_class[TypeInfo, 0] = BaseTypeInfo,
   _typeinfo_class_type[TypeInfo] = Type,
   _typeinfo_class_type[BaseTypeInfo] = Supertype.

secondary_superclass(Supertype, Type) <-
   typeinfo:base_class[TypeInfo, Index] = BaseTypeInfo,
   _typeinfo_class_type[TypeInfo] = Type,
   _typeinfo_class_type[BaseTypeInfo] = Supertype,
   Index > 0.


// Union of the above two kinds of superclasses
direct_superclass(Supertype, Type) <-
   primary_superclass[Type] = Supertype
 ; secondary_superclass(Supertype, Type).


// Inverse relation
direct_subclass(Subtype, Type) <-
   direct_superclass(Type, Subtype).

// Transitive closure computation to compute all superclasses of each
// type

superclass(Supertype, Type) <-
   direct_superclass(Supertype, Type).

superclass(Supertype, Type) <-
   direct_superclass(Supertype, IntermType),
   superclass(IntermType, Type).


// Constraints according to typeinfo recorded inheritance

typeinfo:baseclass(TypeInfo)
 , _typeinfo_class_type[TypeInfo] = ClassType
 ->
   !direct_superclass(_, ClassType).


typeinfo:single_inheritance(TypeInfo)
 , _typeinfo_class_type[TypeInfo] = ClassType
 , direct_superclass(Supertype1, ClassType)
 , direct_superclass(Supertype2, ClassType)
 ->
   Supertype1 = Supertype2.


//------------------------------------------------------------------------------
// Class Type Name Parsing
//------------------------------------------------------------------------------

_struct_type_dot_split(Type, N) <-
   struct_type(Type), type:id(Type:TypeSignature),
   string:split[TypeSignature, ".", N] = _.

_struct_type_dot_splits[Type] = M <-
   agg<<M = max(N)>> _struct_type_dot_split(Type, N).

_struct_type_dotsuffix[Type] = DotSuffix <-
   type:id(Type:TypeSignature),
   _struct_type_dot_splits[Type] = M, M > 1,
   string:split[TypeSignature, ".", M] = DotSuffix.

// Types that are template instantiations
template_type(Type) <-
   _struct_type_dotsuffix[Type] = DotSuffix,
   DotSuffix != "base".

// Types that are unpadded versions of their originals, to be used as
// base types via inheritance
unpadded_struct_type(Type) <-
   struct_type(Type), type:id(Type:TypeSignature),
   string:like(TypeSignature, "%.base").

// Defined in debuginfo module
template_type_name(Name) -> string(Name).

// Typeinfo objects of template types
template_typeinfo(TypeInfo) <-
   debuginfo:loaded(),
   template_type_name(Name),
   _typeinfo_by_class_name[Name] = TypeInfo.

// Fallback when no debug info has been loaded
template_typeinfo(TypeInfo) <-
   !debuginfo:loaded(),
   string:like(Name, "%<%>"),
   _typeinfo_by_class_name[Name] = TypeInfo.


//------------------------------------------------------------------------------
// Constructors and Destructors for objects of this class type
//------------------------------------------------------------------------------

class_type:constructor(Ctor, Type) ->
   struct_type(Type), function_decl(Ctor).

class_type:destructor(Dtor, Type) ->
   struct_type(Type), function_decl(Dtor).


// To identify constructors we rely on the Itanium ABI mangling rules

class_type:constructor(Ctor, Type)
 <-
   struct_type(Type),
   function:name[Ctor] = FuncName,
   function:type[Ctor] = FType,
   function_type:param[FType, 0] = PtrType,
   pointer_type:component[PtrType] = Type,
   ( string:like(FuncName, "%C1%")
   ; string:like(FuncName, "%C2%")).

// Same for destructors

class_type:destructor(Dtor, Type)
 <-
   struct_type(Type),
   function:name[Dtor] = FuncName,
   function:type[Dtor] = FType,
   function_type:param[FType, 0] = PtrType,
   pointer_type:component[PtrType] = Type,
   ( string:like(FuncName, "%D1%")
   ; string:like(FuncName, "%D2%")).
