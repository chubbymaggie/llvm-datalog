// We only need to add declarations and file associations for the
// queries we are interested in exporting


//---------------------------
// Abstract objects
//---------------------------

lang:physical:delimiter[`_heap_allocs] = "\t".
lang:physical:filePath[`_heap_allocs] = "heap-allocations.tsv".
lang:physical:columnNames[`_heap_allocs] = "Alloc".

_heap_allocs(AllocStr) <-
   heap_allocation(Alloc),
   allocation:to_string[Alloc] = AllocStr.

lang:physical:delimiter[`_stack_allocs] = "\t".
lang:physical:filePath[`_stack_allocs] = "stack-allocations.tsv".
lang:physical:columnNames[`_stack_allocs] = "Alloc".

_stack_allocs(AllocStr) <-
   stack_allocation(Alloc),
   allocation:to_string[Alloc] = AllocStr.

lang:physical:delimiter[`_global_allocs] = "\t".
lang:physical:filePath[`_global_allocs] = "global-allocations.tsv".
lang:physical:columnNames[`_global_allocs] = "Alloc".

_global_allocs(AllocStr) <-
   global_allocation(Alloc),
   allocation:to_string[Alloc] = AllocStr.


lang:physical:delimiter[`_alloc_pos] = "\t".
lang:physical:filePath[`_alloc_pos] = "allocation-positions.tsv".
lang:physical:columnNames[`_alloc_pos] = "Alloc	Line	Column".

_alloc_pos(AllocStr, Line, Column) <-
   allocation:pos(Alloc, Line, Column),
   allocation:to_string[Alloc] = AllocStr.


//---------------------------
// Pointer dereferences
//---------------------------

lang:physical:delimiter[`_dereferences] = "\t".
lang:physical:filePath[`_dereferences] = "pointer-dereferences.tsv".
lang:physical:columnNames[`_dereferences] = "SourcePointer	Target".

_dereferences(SrcAllocStr, DestAllocStr) <-
   ptr_points_to$no_zero_aliases(DestAlloc, SrcAlloc),
   allocation:to_string[SrcAlloc] = SrcAllocStr,
   allocation:to_string[DestAlloc] = DestAllocStr.

//---------------------------
// Call-graph
//---------------------------

lang:physical:delimiter[`_cg] = "\t".
lang:physical:filePath[`_cg] = "call-graph.tsv".
lang:physical:columnNames[`_cg] = "Caller	Callee".

_cg(CallerSign, CalleeSign) <-
   callgraph:fn_edge(Callee, Caller),
   function:signature[Callee] = CalleeSign,
   function:signature[Caller] = CallerSign.


//---------------------------
// Monomorphicity
//---------------------------

lang:physical:delimiter[`_nvars_per_pt_size] = "\t".
lang:physical:filePath[`_nvars_per_pt_size] = "nvars-per-pt-size.tsv".
lang:physical:columnNames[`_nvars_per_pt_size] = "Value	Cardinality".

_nvars_per_pt_size[NAllocs] = NVars <-
   _nvars_per_pt_size$tmp[NAllocs] = NVars.

_nvars_per_pt_size$tmp[NAllocs] = NVars <-
   nvars_by_pt_size[NAllocs] = NVars.

_nvars_per_pt_size$tmp[0] = NVars <-
   empty_vars[] = NVars.


lang:physical:delimiter[`_nallocs_per_pt_size] = "\t".
lang:physical:filePath[`_nallocs_per_pt_size] = "nallocs-per-pt-size.tsv".
lang:physical:columnNames[`_nallocs_per_pt_size] = "Value	Cardinality".

_nallocs_per_pt_size[NAllocs] = NPtrs <-
   _nallocs_per_pt_size$tmp[NAllocs] = NPtrs.

_nallocs_per_pt_size$tmp[NAllocs] = NPtrs <-
   nallocs_by_pt_size[NAllocs] = NPtrs.

_nallocs_per_pt_size$tmp[0] = NPtrs <-
   empty_ptrs[] = NPtrs.


//------------------------------------------------------------------------------
// The following queries are not exported
//------------------------------------------------------------------------------


_var_points_to(FuncSign, VarName, AllocStr, Type) <-
   var_points_to(Alloc, Var),
   variable:descriptor(Var, _, FuncSign, _, VarName),
   allocation:to_string[Alloc] = AllocStr,
   allocation:type[Alloc] = Type.

_constant_points_to(Constant, ConstantValue, ConstantType, AllocStr, AllocType)
 <-
   constant_points_to[Constant] = Alloc,
   constant:value[Constant] = ConstantValue,
   constant:type[Constant] = ConstantType,
   allocation:to_string[Alloc] = AllocStr,
   allocation:type[Alloc] = AllocType.

// _init_by_constant[AllocStr] = ConstantValue
//  <-
//    initialized_by_constant[Alloc] = Constant,
//    constant:value[Constant] = ConstantValue,
//    allocation:to_string[Alloc] = AllocStr.

_typed_dereferences(SrcAllocStr, SrcAllocType, DestAllocStr, DestAllocType)
 <-
   ptr_points_to(DestAlloc, SrcAlloc),
   allocation:to_string[SrcAlloc] = SrcAllocStr,
   allocation:to_string[DestAlloc] = DestAllocStr,
   allocation:type[SrcAlloc] = SrcAllocType,
   allocation:type[DestAlloc] = DestAllocType.

_tp_gep_points_to(Func, Var, Index, DeclaredType, AllocStr, TypeName)
 <-
   gep_points_to(Insn, Index, Alloc),
   getelementptr_instruction:interm_type[Insn, Index] = DeclaredType,
   instruction:to[Insn] = To,
   allocation:to_string[Alloc] = AllocStr,
   variable:descriptor(To, _, Func, _, Var),
   ( (allocation:type[Alloc] = Type,
      type:id(Type:TypeName))
   ; (TypeName = "***unknown***",
      !allocation:type[Alloc] = _)).

_gep_points_to(Func, Var, Index, AllocStr, TypeName) <-
   gep_points_to(Insn, Index, Alloc),
   instruction:to[Insn] = To,
   allocation:to_string[Alloc] = AllocStr,
   variable:descriptor(To, _, Func, _, Var),
   ( (allocation:type[Alloc] = Type,
      type:id(Type:TypeName))
   ; (TypeName = "***unknown***",
      !allocation:type[Alloc] = _)).

_typed_alloc(AllocStr, Type) <-
   allocation:to_string[Alloc] = AllocStr,
   allocation:type[Alloc] = Type.

_memcpy(Insn, ToStr, ToType, FromStr, FromType) <-
   memcpy(Insn, To, From),
   allocation:to_string[From] = FromStr,
   allocation:to_string[To] = ToStr,
   allocation:type[To] = ToType,
   allocation:type[From] = FromType.

_type_compatibility(Type1, Type2) <-
   type_compatible(Type1, Type2),
   Type1 != Type2.
