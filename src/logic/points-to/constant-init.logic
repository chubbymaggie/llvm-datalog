// Track the constant that initializes an allocation

initialized_by_constant[Alloc] = Constant ->
   allocation(Alloc), constant(Constant).

initialized_by_constant[Alloc] = Init <-
   global_variable:initializer[Var] = Init,
   global_allocation:by_variable[Var] = BaseAlloc,
   alloc_subregion:at_array_index[BaseAlloc, 0] = Alloc.

initialized_by_constant[Alloc] = InnerConstant <-
   initialized_by_constant[BaseAlloc] = Constant,
   constant_struct(Constant),
   constant_struct:index[Constant, Field] = InnerConstant,
   alloc_subregion:at_field[BaseAlloc, Field] = Alloc,
   // check type compatibility
   constant:type[Constant] = ConstantType,
   allocation:type[BaseAlloc] = Type,
   struct_type(Type),
   struct_type(ConstantType),
   type_compatible:up_to_field(Type, ConstantType, Field).

initialized_by_constant[Alloc] = InnerConstant <-
   initialized_by_constant[BaseAlloc] = Constant,
   constant_array(Constant),
   constant_array:index[Constant, Index] = InnerConstant,
   alloc_subregion:at_array_index[BaseAlloc, Index] = Alloc,
   // check type compatibility
   constant:type[Constant] = ConstantType,
   allocation:type[BaseAlloc] = Type,
   array_type(Type),
   array_type(ConstantType),
   type_compatible(Type, ConstantType).


// Augment array indices to include those from constant initializers

array_indices:__no_typecomp(ConstantType, Index) <-
   constant:type[Constant] = ConstantType,
   constant_array:index[Constant, Index] = _,
   array_type(ConstantType).


// A constant may point to a global allocation, so if used to
// initialize another global allocation, we have to track the
// resulting dereference edge.

ptr_points_to(SomeAlloc, Alloc) <-
   initialized_by_constant[Alloc] = Constant,
   constant_points_to[Constant] = SomeAlloc.
