//------------------------------------------------------------------------------
// Identify the new() function for C++
//------------------------------------------------------------------------------

// There must be a single allocating function

cxx:new_function[] = Func -> function_decl(Func).

// Consider only functions with a single parameter of integer type, no
// definition, and whose unmangled name contains the keyword `new`

cxx:new_function[] = Func, heap_alloc_function(Func)
 <-
   function:signature[Func] = Signature,
   function:type[Func] = FType,
   string:like(Signature, "operator new(%)"),
   function_type:param[FType, 0] = Type,
   integer_type(Type),
   function_type:nparams[FType] = 1,
   !function:definition[Func] = _.

// Introduce new heap allocation selector

heap_allocation:by_new[Insn] = HeapAlloc <-
   cxx:new_function[] = Func,
   ( call_instruction:function[Insn] = Func
   ; invoke_instruction:function[Insn] = Func),
   heap_allocation:by_instruction[Insn] = HeapAlloc.

// Compute allocation size

sized_alloc_instr[Insn] = Size <-
   cxx:new_function[] = Func,
   call_instruction:function[Insn] = Func,
   call_instruction:arg[Insn, 0] = Operand,
   operand:to_int[Operand] = Size.

sized_alloc_instr[Insn] = Size <-
   cxx:new_function[] = Func,
   invoke_instruction:function[Insn] = Func,
   invoke_instruction:arg[Insn, 0] = Operand,
   operand:to_int[Operand] = Size.



//------------------------------------------------------------------------------
// [Constructor and Type]
//
// In order to infer the object type, we track the flow of the object
// being created to some constructor. Intraprocedurally, there will only
// be a single constructor being called, which will have the correct
// type for the object.
//------------------------------------------------------------------------------

constructor:class_type[Ctor] = ClassType <-
   class_type:constructor(Ctor, ClassType).

destructor:class_type[Dtor] = ClassType <-
   class_type:destructor(Dtor, ClassType).

// We have a call to a constructor function (associated with type
// `Type`) inside function `InFunction`, where `this` points to
// `Alloc`. Note that the latter may be initialized by many
// constructors, unless it is of a base type.

init_by_ctor(Type, Ctor, InFunction, Alloc)
 <-
   instruction:function[InitInsn] = InFunction,
   ( call_instruction:function[InitInsn] = Ctor
   ; invoke_instruction:function[InitInsn] = Ctor ),
   constructor:class_type[Ctor] = Type,
   function:actual_arg(Ctor, 0, This),
   operand_points_to(Alloc, This).


// The actual type of the object must match its size, and the relevant
// constructor must be in the same function that allocates it.

allocation:type[HeapAlloc] = Type <-
   !inlined_constructors(),
   instruction:function[AllocInsn] = InFunction,
   heap_allocation:by_new[AllocInsn] = HeapAlloc,
   allocation:size[HeapAlloc] = Size,
   type:size[Type] = Size,
   init_by_ctor(Type, _, InFunction, HeapAlloc).

// In the case of inlined constructors, we mark the heap allocation as
// untyped and rely on the type back-propagation technique.

untyped_allocation(Insn, Alloc) ->
   instruction(Insn), allocation(Alloc).

untyped_allocation(Insn, HeapAlloc) <-
   inlined_constructors(),
   heap_allocation:by_new[Insn] = HeapAlloc.

//----------------------------------------------------
// Identify class instances based on inferred type
//----------------------------------------------------

class_instance(Alloc) <-
   allocation:type[Alloc] = Type,
   class_type(Type),
   basic_allocation(Alloc).

class_instance:constructor[Alloc] = Ctor <-
   allocation:type[Alloc] = Type,
   init_by_ctor(Type, Ctor, _, Alloc),
   basic_allocation(Alloc).


//---------------------------------------------------------------------------
// [Recovering the Class Hierarchy]
//
// We recover the class hierarchy by tracking the sub-object
// constructors called inside the top constructor of some object. This
// will miss parts of the class hierarchy for classes with no
// instances, but these would probably by unreachable code anyway.
//---------------------------------------------------------------------------

primary_superclass[Type] = Supertype ->
   struct_type(Type), struct_type(Supertype).

secondary_superclass(Supertype, Type) ->
   struct_type(Type), struct_type(Supertype).

// The primary superclass of class B is derived by identifying the
// call to some constructor of class A inside the B constructor, that
// is invoked on the receiver object

// primary_superclass[Type] = Supertype <-
//    class_instance:constructor[Alloc] = Ctor,
//    constructor:class_type[Ctor] = Type,
//    init_by_ctor(Supertype, _, Ctor, Alloc),
//    struct_type:field[Type, 0] = UnpaddedType,
//    struct_type:nfields[UnpaddedType] = NFields,
//    type_compatible:up_to_field(Supertype, UnpaddedType, NFields - 1).

// Same thing for secondary superclasses, although the object that
// flows to constructor will have some offset w.r.t the original
// receiver object

// secondary_superclass(Supertype, Type) <-
//    class_instance:constructor[BaseAlloc] = Ctor,
//    constructor:class_type[Ctor] = Type,
//    alloc_aliases(BaseAlloc0, BaseAlloc),
//    alloc_aliases(BaseAlloc, BaseAlloc0),     // redundant opt clause
//    alloc_subregion:base[Alloc] = BaseAlloc0, // reduntant opt clause
//    alloc_subregion:at_field[BaseAlloc0, Index] = Alloc,
//    init_by_ctor(Supertype, _, Ctor, Alloc),
//    struct_type:field[Type, Index] = UnpaddedType,
//    struct_type:nfields[UnpaddedType] = NFields,
//    type_compatible:up_to_field(Supertype, UnpaddedType, NFields - 1),
//    Index != 0.


//----------------------------------------------------
// Find vtable associated with given class instance
//----------------------------------------------------

class_instance:vtable[Alloc] = VTable
 <-
   class_instance:constructor[Alloc] = Ctor,
   instruction:function[StoreInsn] = Ctor,
   store_instruction:value[StoreInsn] = Value,
   store_instruction:address[StoreInsn] = Pointer,
   operand_points_to(Alloc, Pointer),
   operand:as_constant[Value] = Constant,
   constant_contains_vptr(VTable, Constant).


//----------------------------------------------------
// Find class type associated with each vtable
//----------------------------------------------------

// We do that by identifying instructions that store a pointer to a
// vtable to the vpointer of some class instance, inside some
// constructor. We already now the class type associated with each
// constructor function, hence we now have the association between the
// class type and its vtable too.

// This does not always work. TODO: fix

// vtable:class_type[VTable] = Type
//  <-
//    init_by_ctor(Type, Ctor, _, Alloc),
//    instruction:function[StoreInsn] = Ctor,
//    store_instruction:value[StoreInsn] = Value,
//    store_instruction:address[StoreInsn] = Pointer,
//    operand_points_to(Alloc, Pointer),
//    operand:as_constant[Value] = Constant,
//    constant_contains_vptr(VTable, Constant).


// Note !!! Load instructions on class instances will return the
// object's vtable. The array-sensitive treatment of GEP instructions
// will ensure that the indices are appropriately recorded, so that
// any subsequent dynamic dispatch will be correctly resolved by the
// normal dereference rules. However, in case of non-base class types,
// we have to ensure that the vpointer gets strongly updated,
// otherwise it may also point to all v-tables of its parent class
// types !!!



//----------------------------------------------------
// C++ Type Compatibility
//----------------------------------------------------


// REVIEW: Enhance type compatibility rules by allowing a pointer to
// some subclass be used in the place of the pointer to the
// superclass!!

_eligible_base_type(Supertype, Type) <-
   struct_type:field[Type, 0] = UnpaddedType,
   struct_type:nfields[UnpaddedType] = NFields,
   type_compatible:up_to_field(Supertype, UnpaddedType, NFields - 1).

_type_expands_base_type(Supertype, Type) <-
   _eligible_base_type(Supertype, Type).

_type_expands_base_type(Supertype, Type) <-
   _eligible_base_type(Supertype, IntermType),
   _type_expands_base_type(IntermType, Type).

type_compatible(PtrActualType, PtrDeclaredType) <-
   pointer_type:component[PtrActualType] = ActualType,
   pointer_type:component[PtrDeclaredType] = DeclaredType,
   _type_expands_base_type(DeclaredType, ActualType).

struct_type(Type)
 , struct_type(UnpaddedType)
 , type:id(Type:Sign)
 , type:id(UnpaddedType:UnpaddedSign)
 , struct_type:nfields[UnpaddedType] = NFields
 , UnpaddedSign = Sign + ".base"
 ->
   type_compatible:up_to_field(Type, UnpaddedType, NFields - 1).
